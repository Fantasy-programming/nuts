# OpenTelemetry and Logging Configuration Example

# OpenTelemetry Settings
OTEL_ENABLED=true
OTEL_SERVICE_NAME=nuts-backend
OTEL_SERVICE_VERSION=v1.0.0
OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4318  # Example: Jaeger or OTEL Collector
# For production, you might use something like:
# OTEL_EXPORTER_OTLP_ENDPOINT=https://api.honeycomb.io/v1/traces

# Advanced OTLP Configuration (Optional)
# Headers for authentication with OTLP exporters (e.g., API keys)
# Format: key1=value1,key2=value2
# OTEL_EXPORTER_OTLP_HEADERS=api-key=your_api_key,x-custom-header=value

# Compression for OTLP data (gzip or none)
# OTEL_EXPORTER_OTLP_COMPRESSION=gzip

# Protocol for OTLP exports (http/protobuf or grpc)
# OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf

# Metrics temporality preference (delta or cumulative)
# OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE=delta

# Additional resource attributes to attach to telemetry data
# Format: key1=value1,key2=value2 (supports string, int, float, bool)
# OTEL_RESOURCE_ATTRIBUTES=environment=production,datacenter=us-east-1,version=1.2.3

# Maximum length for attribute values (prevents overly large attributes)
# OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT=4095

# Logging Configuration
LOG_LEVEL=info  # trace, debug, info, warn, error, fatal, panic
ENVIRONMENT=development  # development, production, test

# Request Logging (already handled by existing config)
REQUEST_LOG=true

# Example configurations for popular observability providers:

# Honeycomb.io
# OTEL_EXPORTER_OTLP_ENDPOINT=https://api.honeycomb.io
# OTEL_EXPORTER_OTLP_HEADERS=x-honeycomb-team=your_api_key

# Grafana Cloud
# OTEL_EXPORTER_OTLP_ENDPOINT=https://otlp-gateway-prod-us-central-0.grafana.net/otlp
# OTEL_EXPORTER_OTLP_HEADERS=authorization=Basic base64(instanceId:token)

# New Relic
# OTEL_EXPORTER_OTLP_ENDPOINT=https://otlp.nr-data.net
# OTEL_EXPORTER_OTLP_HEADERS=api-key=your_license_key

# Datadog (requires Datadog Agent with OTLP enabled)
# OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4318

# Example Docker Compose setup for local development:
# services:
#   jaeger:
#     image: jaegertracing/all-in-one:latest
#     ports:
#       - "16686:16686"  # Jaeger UI
#       - "14268:14268"  # Jaeger collector
#       - "4318:4318"    # OTLP HTTP receiver
#     environment:
#       - COLLECTOR_OTLP_ENABLED=true
#
#   nuts-backend:
#     build: .
#     environment:
#       - OTEL_ENABLED=true
#       - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4318
#       - LOG_LEVEL=debug
#       - OTEL_EXPORTER_OTLP_COMPRESSION=gzip
#       - OTEL_RESOURCE_ATTRIBUTES=environment=development,service_instance=backend-1
#     depends_on:
#       - jaeger