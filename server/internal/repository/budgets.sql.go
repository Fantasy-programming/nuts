// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: budgets.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/shopspring/decimal"
)

const createBudget = `-- name: CreateBudget :one
INSERT INTO budgets (
  shared_finance_id,
  category_id,
  amount,
  name,
  start_date,
  end_date,
  frequency,
  -- rollover_enabled,
  user_id
  ) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
  ) RETURNING id, created_at, updated_at
`

type CreateBudgetParams struct {
	SharedFinanceID *uuid.UUID      `json:"shared_finance_id"`
	CategoryID      uuid.UUID       `json:"category_id"`
	Amount          decimal.Decimal `json:"amount"`
	Name            *string         `json:"name"`
	StartDate       pgtype.Date     `json:"start_date"`
	EndDate         pgtype.Date     `json:"end_date"`
	Frequency       string          `json:"frequency"`
	UserID          uuid.UUID       `json:"user_id"`
}

type CreateBudgetRow struct {
	ID        uuid.UUID  `json:"id"`
	CreatedAt *time.Time `json:"created_at"`
	UpdatedAt *time.Time `json:"updated_at"`
}

func (q *Queries) CreateBudget(ctx context.Context, arg CreateBudgetParams) (CreateBudgetRow, error) {
	row := q.db.QueryRow(ctx, createBudget,
		arg.SharedFinanceID,
		arg.CategoryID,
		arg.Amount,
		arg.Name,
		arg.StartDate,
		arg.EndDate,
		arg.Frequency,
		arg.UserID,
	)
	var i CreateBudgetRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const updateBudget = `-- name: UpdateBudget :exec
UPDATE budgets
SET
    category_id = $1,
    amount = $2,
    name = $3,
    start_date = $4,
    end_date = $5,
    frequency = $6,
    -- rollover_enabled = $7,
    updated_at = $7
WHERE id = $8
`

type UpdateBudgetParams struct {
	CategoryID uuid.UUID          `json:"category_id"`
	Amount     decimal.Decimal    `json:"amount"`
	Name       *string            `json:"name"`
	StartDate  pgtype.Date        `json:"start_date"`
	EndDate    pgtype.Date        `json:"end_date"`
	Frequency  string             `json:"frequency"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
	ID         uuid.UUID          `json:"id"`
}

func (q *Queries) UpdateBudget(ctx context.Context, arg UpdateBudgetParams) error {
	_, err := q.db.Exec(ctx, updateBudget,
		arg.CategoryID,
		arg.Amount,
		arg.Name,
		arg.StartDate,
		arg.EndDate,
		arg.Frequency,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
