// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: account.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
    created_by,
    name,
    type,
    balance,
    currency,
    color,
    meta
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, name, type, balance, currency, color, meta, created_by, updated_by, created_at, updated_at, deleted_at
`

type CreateAccountParams struct {
	CreatedBy *uuid.UUID     `json:"created_by"`
	Name      string         `json:"name"`
	Type      ACCOUNTTYPE    `json:"type"`
	Balance   pgtype.Numeric `json:"balance"`
	Currency  string         `json:"currency"`
	Color     COLORENUM      `json:"color"`
	Meta      []byte         `json:"meta"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount,
		arg.CreatedBy,
		arg.Name,
		arg.Type,
		arg.Balance,
		arg.Currency,
		arg.Color,
		arg.Meta,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Balance,
		&i.Currency,
		&i.Color,
		&i.Meta,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getAccountById = `-- name: GetAccountById :one
SELECT
    id,
    name,
    type,
    balance,
    currency,
    meta
FROM accounts
WHERE id = $1 LIMIT 1
`

type GetAccountByIdRow struct {
	ID       uuid.UUID      `json:"id"`
	Name     string         `json:"name"`
	Type     ACCOUNTTYPE    `json:"type"`
	Balance  pgtype.Numeric `json:"balance"`
	Currency string         `json:"currency"`
	Meta     []byte         `json:"meta"`
}

func (q *Queries) GetAccountById(ctx context.Context, id uuid.UUID) (GetAccountByIdRow, error) {
	row := q.db.QueryRow(ctx, getAccountById, id)
	var i GetAccountByIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Balance,
		&i.Currency,
		&i.Meta,
	)
	return i, err
}

const getAccounts = `-- name: GetAccounts :many
SELECT
    id,
    name,
    type,
    balance,
    currency,
    meta
FROM accounts
WHERE created_by = $1
`

type GetAccountsRow struct {
	ID       uuid.UUID      `json:"id"`
	Name     string         `json:"name"`
	Type     ACCOUNTTYPE    `json:"type"`
	Balance  pgtype.Numeric `json:"balance"`
	Currency string         `json:"currency"`
	Meta     []byte         `json:"meta"`
}

func (q *Queries) GetAccounts(ctx context.Context, userID *uuid.UUID) ([]GetAccountsRow, error) {
	rows, err := q.db.Query(ctx, getAccounts, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAccountsRow{}
	for rows.Next() {
		var i GetAccountsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.Balance,
			&i.Currency,
			&i.Meta,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
