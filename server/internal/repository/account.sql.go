// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: account.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
    created_by,
    name,
    type,
    balance,
    currency,
    color,
    meta
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, name, type, balance, currency, color, meta, created_by, updated_by, created_at, updated_at, deleted_at
`

type CreateAccountParams struct {
	CreatedBy *uuid.UUID     `json:"created_by"`
	Name      string         `json:"name"`
	Type      ACCOUNTTYPE    `json:"type"`
	Balance   pgtype.Numeric `json:"balance"`
	Currency  string         `json:"currency"`
	Color     COLORENUM      `json:"color"`
	Meta      []byte         `json:"meta"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount,
		arg.CreatedBy,
		arg.Name,
		arg.Type,
		arg.Balance,
		arg.Currency,
		arg.Color,
		arg.Meta,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Balance,
		&i.Currency,
		&i.Color,
		&i.Meta,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
UPDATE accounts
SET
    deleted_at = current_timestamp
WHERE id = $1
RETURNING id, name, type, balance, currency, color, meta, created_by, updated_by, created_at, updated_at, deleted_at
`

func (q *Queries) DeleteAccount(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAccount, id)
	return err
}

const getAccountBalanceTimeline = `-- name: GetAccountBalanceTimeline :many
WITH relevant_period AS (
    SELECT
        date_trunc('month', now()) - INTERVAL '11 months' AS start_month,
        date_trunc('month', now()) AS end_month,
        now() - INTERVAL '1 year' AS start_boundary
),
months AS (
    -- Generate months for the relevant period
    SELECT generate_series(
        (SELECT start_month FROM relevant_period),
        (SELECT end_month FROM relevant_period),
        INTERVAL '1 month'
    ) AS month
),
account_info AS (
    -- Get account creation date
    SELECT created_at
    FROM accounts
    WHERE accounts.id = $1
),
initial_balance AS (
     -- Calculate balance for the specific account just BEFORE the start_month
    SELECT
        COALESCE(sum(
            CASE
                WHEN t.type = 'income' THEN t.amount
                WHEN t.type = 'expense' THEN -t.amount
                WHEN t.type = 'transfer' AND t.account_id = $1 THEN -t.amount -- Source
                WHEN t.type = 'transfer' AND t.destination_account_id = $1 THEN t.amount -- Destination
                ELSE 0
            END
        ), 0)::DECIMAL AS balance_before_period
    FROM transactions t
    WHERE t.account_id = $1 OR t.destination_account_id = $1 -- Consider transfers in/out
      AND t.transaction_datetime < (SELECT start_month FROM relevant_period)
      -- Assuming created_by check is handled by ensuring $1 belongs to the user in app logic
),
monthly_transactions AS (
    -- Aggregate transactions per month for the specific account WITHIN the period
    SELECT
        date_trunc('month', t.transaction_datetime) AS month,
        sum(
            CASE
                WHEN t.type = 'income' THEN t.amount
                WHEN t.type = 'expense' THEN -t.amount
                WHEN t.type = 'transfer' AND t.account_id = $1 THEN -t.amount -- Source
                WHEN t.type = 'transfer' AND t.destination_account_id = $1 THEN t.amount -- Destination
                ELSE 0
            END
        ) AS monthly_net
    FROM transactions t
    WHERE (t.account_id = $1 OR t.destination_account_id = $1) -- Consider transfers in/out
      AND t.transaction_datetime >= (SELECT start_month FROM relevant_period)
      AND t.transaction_datetime < ( (SELECT end_month FROM relevant_period) + INTERVAL '1 month')
    GROUP BY month
),
combined AS (
    -- Combine months, initial balance, and monthly nets
    SELECT
        m.month,
        COALESCE(ib.balance_before_period, 0) AS initial_balance,
        COALESCE(mt.monthly_net, 0) AS monthly_net
    FROM months m
    CROSS JOIN initial_balance ib
    LEFT JOIN monthly_transactions mt ON m.month = mt.month
    JOIN account_info ai ON m.month >= date_trunc('month', ai.created_at) -- Filter months before account creation
),
running_balance AS (
    -- Compute cumulative balance including the initial balance
    SELECT
        c.month,
        c.initial_balance + sum(c.monthly_net) OVER (
            ORDER BY c.month
            ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
        ) AS balance
    FROM combined c
)
SELECT
    month::TIMESTAMPTZ,
    balance::DECIMAL
FROM running_balance
ORDER BY month
`

type GetAccountBalanceTimelineRow struct {
	Month   time.Time      `json:"month"`
	Balance pgtype.Numeric `json:"balance"`
}

// Changed to :many as it returns multiple rows (one per month)
func (q *Queries) GetAccountBalanceTimeline(ctx context.Context, id uuid.UUID) ([]GetAccountBalanceTimelineRow, error) {
	rows, err := q.db.Query(ctx, getAccountBalanceTimeline, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAccountBalanceTimelineRow{}
	for rows.Next() {
		var i GetAccountBalanceTimelineRow
		if err := rows.Scan(&i.Month, &i.Balance); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAccountById = `-- name: GetAccountById :one
SELECT
    id,
    name,
    type,
    balance,
    currency,
    meta,
    color,
    created_by,
    updated_at
FROM accounts
WHERE id = $1
AND deleted_at IS NULL
LIMIT 1
`

type GetAccountByIdRow struct {
	ID        uuid.UUID      `json:"id"`
	Name      string         `json:"name"`
	Type      ACCOUNTTYPE    `json:"type"`
	Balance   pgtype.Numeric `json:"balance"`
	Currency  string         `json:"currency"`
	Meta      []byte         `json:"meta"`
	Color     COLORENUM      `json:"color"`
	CreatedBy *uuid.UUID     `json:"created_by"`
	UpdatedAt time.Time      `json:"updated_at"`
}

func (q *Queries) GetAccountById(ctx context.Context, id uuid.UUID) (GetAccountByIdRow, error) {
	row := q.db.QueryRow(ctx, getAccountById, id)
	var i GetAccountByIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Balance,
		&i.Currency,
		&i.Meta,
		&i.Color,
		&i.CreatedBy,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccounts = `-- name: GetAccounts :many
SELECT
    id,
    name,
    type,
    balance,
    currency,
    color,
    meta,
    updated_at
FROM accounts
WHERE created_by = $1
AND deleted_at IS NULL
`

type GetAccountsRow struct {
	ID        uuid.UUID      `json:"id"`
	Name      string         `json:"name"`
	Type      ACCOUNTTYPE    `json:"type"`
	Balance   pgtype.Numeric `json:"balance"`
	Currency  string         `json:"currency"`
	Color     COLORENUM      `json:"color"`
	Meta      []byte         `json:"meta"`
	UpdatedAt time.Time      `json:"updated_at"`
}

func (q *Queries) GetAccounts(ctx context.Context, userID *uuid.UUID) ([]GetAccountsRow, error) {
	rows, err := q.db.Query(ctx, getAccounts, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAccountsRow{}
	for rows.Next() {
		var i GetAccountsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.Balance,
			&i.Currency,
			&i.Color,
			&i.Meta,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAccountsBalanceTimeline = `-- name: GetAccountsBalanceTimeline :many
WITH relevant_period AS (
    SELECT
        date_trunc('month', now()) - INTERVAL '11 months' AS start_month,
        date_trunc('month', now()) AS end_month,
        now() - INTERVAL '1 year' AS start_boundary -- For transaction filtering
),
months AS (
    -- Generate months for the relevant period
    SELECT generate_series(
        (SELECT start_month FROM relevant_period),
        (SELECT end_month FROM relevant_period),
        INTERVAL '1 month'
    ) AS month
),
account_ids AS (
    -- Get active account IDs for the user
    SELECT
        id AS account_id,
        created_at -- Needed to ensure we don't calculate balance before creation
    FROM accounts
    WHERE deleted_at IS NULL
    AND accounts.created_by = $1
),
initial_balances AS (
    -- Calculate balance for each account just BEFORE the start_month
    SELECT
        t.account_id,
        COALESCE(sum(
            CASE
                WHEN t.type = 'income' THEN t.amount
                WHEN t.type = 'expense' THEN -t.amount
                -- Transfers need careful handling: outflow from source, inflow to destination
                WHEN t.type = 'transfer' AND t.account_id = t.account_id THEN -t.amount -- Assuming t.account_id is the source
                WHEN t.type = 'transfer' AND t.account_id = t.destination_account_id THEN t.amount -- Assuming t.account_id is the destination
                ELSE 0
            END
        ), 0)::DECIMAL AS balance_before_period
    FROM transactions t
    JOIN account_ids aids ON t.account_id = aids.account_id
    WHERE t.transaction_datetime < (SELECT start_month FROM relevant_period)
      AND t.created_by = $1
    GROUP BY t.account_id
),
monthly_transactions AS (
    -- Aggregate transactions per month per account WITHIN the relevant period
    SELECT
        t.account_id,
        date_trunc('month', t.transaction_datetime) AS month,
        sum(
            CASE
                 WHEN t.type = 'income' THEN t.amount
                 WHEN t.type = 'expense' THEN -t.amount
                 WHEN t.type = 'transfer' AND t.account_id = t.account_id THEN -t.amount -- Source
                 WHEN t.type = 'transfer' AND t.account_id = t.destination_account_id THEN t.amount -- Destination
                 ELSE 0
            END
        ) AS monthly_net
    FROM transactions t
    JOIN account_ids aids ON t.account_id = aids.account_id
    WHERE t.transaction_datetime >= (SELECT start_month FROM relevant_period)
      AND t.transaction_datetime < ( (SELECT end_month FROM relevant_period) + INTERVAL '1 month') -- Cover full end month
      AND t.created_by = $1
    GROUP BY t.account_id, month
),
combined AS (
    -- Create a row for each account and each month in the period
    -- Start with the initial balance and add monthly nets
    SELECT
        m.month,
        aids.account_id,
        COALESCE(ib.balance_before_period, 0) AS initial_balance,
        COALESCE(mt.monthly_net, 0) AS monthly_net
    FROM months m
    CROSS JOIN account_ids aids
    LEFT JOIN initial_balances ib ON aids.account_id = ib.account_id
    LEFT JOIN monthly_transactions mt ON aids.account_id = mt.account_id AND m.month = mt.month
    -- Only include months after or including account creation month
    WHERE m.month >= date_trunc('month', aids.created_at)
),
running_balance AS (
    -- Compute cumulative balance for each account
    SELECT
        c.month,
        c.account_id,
        c.initial_balance + sum(c.monthly_net) OVER (
            PARTITION BY c.account_id
            ORDER BY c.month
            ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
        ) AS balance
    FROM combined c
)
SELECT
    rb.month::TIMESTAMPTZ as month,
    sum(rb.balance)::DECIMAL AS balance
FROM running_balance rb
GROUP BY rb.month
ORDER BY rb.month
`

type GetAccountsBalanceTimelineRow struct {
	Month   time.Time      `json:"month"`
	Balance pgtype.Numeric `json:"balance"`
}

// Final SUM of balances across all accounts per month
func (q *Queries) GetAccountsBalanceTimeline(ctx context.Context, userID *uuid.UUID) ([]GetAccountsBalanceTimelineRow, error) {
	rows, err := q.db.Query(ctx, getAccountsBalanceTimeline, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAccountsBalanceTimelineRow{}
	for rows.Next() {
		var i GetAccountsBalanceTimelineRow
		if err := rows.Scan(&i.Month, &i.Balance); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAccountsWithTrend = `-- name: GetAccountsWithTrend :many
WITH period AS (
    SELECT $1::TIMESTAMPTZ AS start_date, $2::TIMESTAMPTZ AS end_date
),
account_info AS (
    -- Get account info, including creation date
    SELECT
        id AS account_id,
        name,
        type,
        currency,
        color,
        meta,
        created_by,
        created_at,
        updated_at,
        deleted_at
    FROM accounts
    WHERE accounts.created_by = $3
      -- Include accounts active at any point during the period
      AND created_at <= (SELECT end_date FROM period)
      AND (deleted_at IS NULL OR deleted_at > (SELECT start_date FROM period))
),
balance_calc AS (
    -- Calculate balance at the start and end of the period for each account
    SELECT
        t.account_id,
        -- Balance just BEFORE start_date
        COALESCE(sum(
            CASE
                WHEN t.transaction_datetime < (SELECT start_date FROM period) THEN
                    CASE
                        WHEN t.type = 'income' THEN t.amount
                        WHEN t.type = 'expense' THEN -t.amount
                        WHEN t.type = 'transfer' AND t.account_id = t.account_id THEN -t.amount
                        WHEN t.type = 'transfer' AND t.account_id = t.destination_account_id THEN t.amount
                        ELSE 0
                    END
                ELSE 0
            END
        ), 0)::DECIMAL AS start_balance,
        -- Balance AT end_date (inclusive)
        COALESCE(sum(
            CASE
                WHEN t.transaction_datetime <= (SELECT end_date FROM period) THEN
                    CASE
                        WHEN t.type = 'income' THEN t.amount
                        WHEN t.type = 'expense' THEN -t.amount
                        WHEN t.type = 'transfer' AND t.account_id = t.account_id THEN -t.amount
                        WHEN t.type = 'transfer' AND t.account_id = t.destination_account_id THEN t.amount
                        ELSE 0
                    END
                ELSE 0
            END
        ), 0)::DECIMAL AS end_balance
    FROM transactions t
    JOIN account_info ai ON (t.account_id = ai.account_id OR t.destination_account_id = ai.account_id)
    WHERE t.created_by = $3
      AND t.transaction_datetime <= (SELECT end_date FROM period)
      -- Filter transactions related to the accounts active in the period
    GROUP BY t.account_id
),
account_trend AS (
    -- Calculate trend percentage based on actual start/end balances
    SELECT
        ai.account_id,
        ai.name,
        ai.type,
        COALESCE(bc.end_balance, 0) AS balance, -- Current balance is the end_balance
        ai.currency,
        ai.color,
        ai.meta,
        ai.updated_at,
        CASE
            -- Avoid division by zero if start_balance is 0
            WHEN COALESCE(bc.start_balance, 0) = 0 THEN
                CASE
                    -- If end balance is also 0, trend is 0
                    WHEN COALESCE(bc.end_balance, 0) = 0 THEN 0
                    -- If start is 0 but end is positive/negative, trend is infinite (represent as 100% or specific value?)
                    -- Let's return 100% if end > start (0), -100% if end < start (0). Or null? Let's use 100/-100 for simplicity.
                    WHEN COALESCE(bc.end_balance, 0) > 0 THEN 100.0
                    ELSE -100.0 -- or potentially 0 or NULL depending on desired behaviour
                END
            -- Normal trend calculation
            ELSE
                ( (COALESCE(bc.end_balance, 0) - bc.start_balance) / ABS(bc.start_balance) * 100.0 )
        END::DECIMAL AS trend
    FROM account_info ai
    LEFT JOIN balance_calc bc ON ai.account_id = bc.account_id
    -- Ensure we only consider the balance if the account existed at the start date for trend calculation
    -- If created within the period, trend starts from 0.
    WHERE ai.created_at <= (SELECT end_date FROM period) -- Redundant check, but safe
      AND (ai.deleted_at IS NULL OR ai.deleted_at > (SELECT start_date FROM period)) -- Ensure not deleted before period start
),
ranked_transactions AS (
    -- Rank transactions within the period for each account to get the latest N
    SELECT
        t.id,
        t.account_id,
        t.amount,
        t.type,
        t.transaction_datetime,
        t.description,
        ROW_NUMBER() OVER (PARTITION BY t.account_id ORDER BY t.transaction_datetime DESC, t.created_at DESC) as rn
    FROM transactions t
    JOIN account_info ai ON t.account_id = ai.account_id -- Join to filter by user accounts implicitly
    WHERE t.transaction_datetime <= (SELECT end_date FROM period)
      AND t.created_by = $3
      -- Optimization: Add t.transaction_datetime >= (SELECT start_date FROM period) if only transactions *within* the period are desired
),
latest_transactions AS (
    -- Aggregate the top 3 transactions into JSONB
    SELECT
        rt.account_id,
        jsonb_agg(
            jsonb_build_object(
                'id', rt.id,
                'amount', rt.amount,
                'type', rt.type,
                'transaction_datetime', rt.transaction_datetime,
                'description', rt.description
            )
            ORDER BY rt.transaction_datetime DESC, rt.rn ASC -- Ensure consistent order in aggregation
        ) FILTER (WHERE rt.rn <= 3) AS transactions -- Aggregate only the top 3
    FROM ranked_transactions rt
    WHERE rt.rn <= 3
    GROUP BY rt.account_id
)
SELECT
    at.account_id as id,
    at.name,
    at.type,
    at.balance::DECIMAL as balance, -- Balance at the end_date
    at.currency,
    at.color,
    at.meta,
    at.updated_at,
    at.trend::DECIMAL as trend,
    COALESCE(lt.transactions, '[]'::JSONB)::JSONB AS transactions -- Return empty JSON array if no transactions
FROM account_trend at
LEFT JOIN latest_transactions lt ON at.account_id = lt.account_id
ORDER BY at.name
`

type GetAccountsWithTrendParams struct {
	Column1 time.Time  `json:"column_1"`
	Column2 time.Time  `json:"column_2"`
	UserID  *uuid.UUID `json:"user_id"`
}

type GetAccountsWithTrendRow struct {
	ID           uuid.UUID      `json:"id"`
	Name         string         `json:"name"`
	Type         ACCOUNTTYPE    `json:"type"`
	Balance      pgtype.Numeric `json:"balance"`
	Currency     string         `json:"currency"`
	Color        COLORENUM      `json:"color"`
	Meta         []byte         `json:"meta"`
	UpdatedAt    time.Time      `json:"updated_at"`
	Trend        pgtype.Numeric `json:"trend"`
	Transactions []byte         `json:"transactions"`
}

// Final query joining trend with last 3 transactions
func (q *Queries) GetAccountsWithTrend(ctx context.Context, arg GetAccountsWithTrendParams) ([]GetAccountsWithTrendRow, error) {
	rows, err := q.db.Query(ctx, getAccountsWithTrend, arg.Column1, arg.Column2, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAccountsWithTrendRow{}
	for rows.Next() {
		var i GetAccountsWithTrendRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.Balance,
			&i.Currency,
			&i.Color,
			&i.Meta,
			&i.UpdatedAt,
			&i.Trend,
			&i.Transactions,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE accounts
SET
    name = coalesce($1, name),
    type = coalesce($2, type),
    balance = coalesce($3, balance),
    currency = coalesce($4, currency),
    color = coalesce($5, color),
    meta = coalesce($6, meta),
    updated_by = $7
WHERE id = $8
RETURNING id, name, type, balance, currency, color, meta, created_by, updated_by, created_at, updated_at, deleted_at
`

type UpdateAccountParams struct {
	Name      *string         `json:"name"`
	Type      NullACCOUNTTYPE `json:"type"`
	Balance   pgtype.Numeric  `json:"balance"`
	Currency  *string         `json:"currency"`
	Color     NullCOLORENUM   `json:"color"`
	Meta      []byte          `json:"meta"`
	UpdatedBy *uuid.UUID      `json:"updated_by"`
	ID        uuid.UUID       `json:"id"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, updateAccount,
		arg.Name,
		arg.Type,
		arg.Balance,
		arg.Currency,
		arg.Color,
		arg.Meta,
		arg.UpdatedBy,
		arg.ID,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Balance,
		&i.Currency,
		&i.Color,
		&i.Meta,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateAccountBalance = `-- name: UpdateAccountBalance :exec
UPDATE accounts
SET balance = balance + $2
WHERE id = $1
`

type UpdateAccountBalanceParams struct {
	ID      uuid.UUID      `json:"id"`
	Balance pgtype.Numeric `json:"balance"`
}

func (q *Queries) UpdateAccountBalance(ctx context.Context, arg UpdateAccountBalanceParams) error {
	_, err := q.db.Exec(ctx, updateAccountBalance, arg.ID, arg.Balance)
	return err
}
