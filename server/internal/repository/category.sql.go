// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: category.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (
    name,
    icon,
    color,
    parent_id,
    is_default,
    type,
    created_by
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, name, parent_id, is_default, created_by, updated_by, created_at, updated_at, deleted_at, type, color, icon
`

type CreateCategoryParams struct {
	Name      string     `json:"name"`
	Icon      string     `json:"icon"`
	Color     *string    `json:"color"`
	ParentID  *uuid.UUID `json:"parent_id"`
	IsDefault *bool      `json:"is_default"`
	Type      string     `json:"type"`
	CreatedBy uuid.UUID  `json:"created_by"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, createCategory,
		arg.Name,
		arg.Icon,
		arg.Color,
		arg.ParentID,
		arg.IsDefault,
		arg.Type,
		arg.CreatedBy,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ParentID,
		&i.IsDefault,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Type,
		&i.Color,
		&i.Icon,
	)
	return i, err
}

const createDefaultCategories = `-- name: CreateDefaultCategories :exec
WITH parent_categories AS (
    INSERT INTO categories (
        name,
        is_default,
        created_by,
        type,
        color,
        icon
    )
    VALUES
    ('Food & Beverage', TRUE, $1, 'expense', '#FF7043', 'Pizza'),
    ('Shopping', TRUE, $1, 'expense', '#AB47BC', 'ShoppingBag'),
    ('Housing', TRUE, $1, 'expense', '#29B6F6', 'Gome'),
    ('Transportation', TRUE, $1, 'expense', '#42A5F5', 'Bus'),
    ('Vehicle', TRUE, $1, 'expense', '#8D6E63', 'Car'),
    ('Life & Entertainment', TRUE, $1, 'expense', '#66BB6A', 'Music'),
    ('Communication & PC', TRUE, $1, 'expense', '#26A69A', 'Smartphone'),
    ('Financial Expenses', TRUE, $1, 'expense', '#EC407A', 'Credit-card'),
    ('Investments', TRUE, $1, 'expense', '#7E57C2', 'BarChart2'),
    ('Income', TRUE, $1, 'income', '#26C6DA', 'DollarSign'),
    ('Others', TRUE, $1, 'expense', '#78909C', 'Circle'),
    ('Transfers', TRUE, $1, 'expense', '#FFA726', 'Repeat')
    RETURNING id, name, color, icon
),
food_subcategories AS (
    INSERT INTO categories (name, parent_id, is_default, created_by, type, color, icon)
    SELECT subcat.name, pc.id, TRUE, $1, 'expense', pc.color, pc.icon
    FROM (VALUES ('Bar & Cafe'), ('Groceries'), ('Restaurant & Fast Food')) AS subcat(name)
    JOIN parent_categories pc ON pc.name = 'Food & Beverage'
),
shopping_subcategories AS (
    INSERT INTO categories (name, parent_id, is_default, created_by, type, color, icon)
    SELECT subcat.name, pc.id, TRUE, $1, 'expense', pc.color, pc.icon
    FROM (VALUES ('Clothing & Shoes'), ('Electronics'), ('Health & Beauty'), ('Home & Garden'), ('Gifts'), ('Sports Equipment')) AS subcat(name)
    JOIN parent_categories pc ON pc.name = 'Shopping'
),
housing_subcategories AS (
    INSERT INTO categories (name, parent_id, is_default, created_by, type, color, icon)
    SELECT subcat.name, pc.id, TRUE, $1, 'expense', pc.color, pc.icon
    FROM (VALUES ('Rent'), ('Mortgage'), ('Utilities'), ('Maintenance & Repairs'), ('Property Tax')) AS subcat(name)
    JOIN parent_categories pc ON pc.name = 'Housing'
),
transportation_subcategories AS (
    INSERT INTO categories (name, parent_id, is_default, created_by, type, color, icon)
    SELECT subcat.name, pc.id, TRUE, $1, 'expense', pc.color, pc.icon
    FROM (VALUES ('Public Transport'), ('Taxi & Ride Share'), ('Parking'), ('Travel')) AS subcat(name)
    JOIN parent_categories pc ON pc.name = 'Transportation'
),
vehicle_subcategories AS (
    INSERT INTO categories (name, parent_id, is_default, created_by, type, color, icon)
    SELECT subcat.name, pc.id, TRUE, $1, 'expense', pc.color, pc.icon
    FROM (VALUES ('Fuel'), ('Service & Maintenance'), ('Insurance'), ('Registration & Tax')) AS subcat(name)
    JOIN parent_categories pc ON pc.name = 'Vehicle'
),
life_entertainment_subcategories AS (
    INSERT INTO categories (name, parent_id, is_default, created_by, type, color, icon)
    SELECT subcat.name, pc.id, TRUE, $1, 'expense', pc.color, pc.icon
    FROM (VALUES ('Entertainment'), ('Health & Fitness'), ('Hobbies'), ('Education'), ('Pets'), ('Subscriptions')) AS subcat(name)
    JOIN parent_categories pc ON pc.name = 'Life & Entertainment'
),
communication_pc_subcategories AS (
    INSERT INTO categories (name, parent_id, is_default, created_by, type, color, icon)
    SELECT subcat.name, pc.id, TRUE, $1, 'expense', pc.color, pc.icon
    FROM (VALUES ('Phone'), ('Internet'), ('Software & Apps'), ('Hardware & Devices')) AS subcat(name)
    JOIN parent_categories pc ON pc.name = 'Communication & PC'
),
financial_expenses_subcategories AS (
    INSERT INTO categories (name, parent_id, is_default, created_by, type, color, icon)
    SELECT subcat.name, pc.id, TRUE, $1, 'expense', pc.color, pc.icon
    FROM (VALUES ('Bank Fees'), ('Interest'), ('Taxes'), ('Insurance')) AS subcat(name)
    JOIN parent_categories pc ON pc.name = 'Financial Expenses'
),
investments_subcategories AS (
    INSERT INTO categories (name, parent_id, is_default, created_by, type, color, icon)
    SELECT subcat.name, pc.id, TRUE, $1, 'expense', pc.color, pc.icon
    FROM (VALUES ('Stocks'), ('Crypto'), ('Real Estate'), ('Retirement'), ('Savings')) AS subcat(name)
    JOIN parent_categories pc ON pc.name = 'Investments'
),
income_subcategories AS (
    INSERT INTO categories (name, parent_id, is_default, created_by, type, color, icon)
    SELECT subcat.name, pc.id, TRUE, $1, 'income', pc.color, pc.icon
    FROM (VALUES ('Salary'), ('Business'), ('Dividends'), ('Interest'), ('Rental'), ('Sale'), ('Gifts Received')) AS subcat(name)
    JOIN parent_categories pc ON pc.name = 'Income'
)
SELECT 1
`

func (q *Queries) CreateDefaultCategories(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, createDefaultCategories, userID)
	return err
}

const deleteCategory = `-- name: DeleteCategory :exec
UPDATE categories
SET deleted_at = current_timestamp
WHERE id = $1
RETURNING id, name, parent_id, is_default, created_by, updated_by, created_at, updated_at, deleted_at, type, color, icon
`

func (q *Queries) DeleteCategory(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCategory, id)
	return err
}

const getCategoryById = `-- name: GetCategoryById :one
SELECT id, name, parent_id, is_default, created_by, updated_by, created_at, updated_at, deleted_at, type, color, icon
FROM categories
WHERE
    id = $1
    AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetCategoryById(ctx context.Context, id uuid.UUID) (Category, error) {
	row := q.db.QueryRow(ctx, getCategoryById, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ParentID,
		&i.IsDefault,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Type,
		&i.Color,
		&i.Icon,
	)
	return i, err
}

const getCategoryByName = `-- name: GetCategoryByName :one
SELECT id, name, parent_id, is_default, created_by, updated_by, created_at, updated_at, deleted_at, type, color, icon
FROM categories
WHERE
    name = $1
LIMIT 1
`

func (q *Queries) GetCategoryByName(ctx context.Context, name string) (Category, error) {
	row := q.db.QueryRow(ctx, getCategoryByName, name)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ParentID,
		&i.IsDefault,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Type,
		&i.Color,
		&i.Icon,
	)
	return i, err
}

const getDefaultCategories = `-- name: GetDefaultCategories :many
SELECT id, name, parent_id, is_default, created_by, updated_by, created_at, updated_at, deleted_at, type, color, icon
FROM categories
WHERE
    created_by = $1
    AND is_default = TRUE
    AND deleted_at IS NULL
`

func (q *Queries) GetDefaultCategories(ctx context.Context, userID uuid.UUID) ([]Category, error) {
	rows, err := q.db.Query(ctx, getDefaultCategories, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ParentID,
			&i.IsDefault,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Type,
			&i.Color,
			&i.Icon,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCategories = `-- name: ListCategories :many
SELECT id, name, parent_id, is_default, created_by, updated_by, created_at, updated_at, deleted_at, type, color, icon
FROM categories
WHERE
    created_by = $1
    AND deleted_at IS NULL
`

func (q *Queries) ListCategories(ctx context.Context, userID uuid.UUID) ([]Category, error) {
	rows, err := q.db.Query(ctx, listCategories, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ParentID,
			&i.IsDefault,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Type,
			&i.Color,
			&i.Icon,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listChildCategories = `-- name: ListChildCategories :many
SELECT id, name, parent_id, is_default, created_by, updated_by, created_at, updated_at, deleted_at, type, color, icon
FROM categories
WHERE
    parent_id = $1
    AND deleted_at IS NULL
`

func (q *Queries) ListChildCategories(ctx context.Context, parentID *uuid.UUID) ([]Category, error) {
	rows, err := q.db.Query(ctx, listChildCategories, parentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ParentID,
			&i.IsDefault,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Type,
			&i.Color,
			&i.Icon,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE categories
SET
    name = coalesce($1, name),
    parent_id = coalesce($2, parent_id),
    is_default = coalesce($3, is_default),
    updated_by = $4
WHERE
    id = $5
    AND deleted_at IS NULL
RETURNING id, name, parent_id, is_default, created_by, updated_by, created_at, updated_at, deleted_at, type, color, icon
`

type UpdateCategoryParams struct {
	Name      *string    `json:"name"`
	ParentID  *uuid.UUID `json:"parent_id"`
	IsDefault *bool      `json:"is_default"`
	UpdatedBy *uuid.UUID `json:"updated_by"`
	ID        uuid.UUID  `json:"id"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, updateCategory,
		arg.Name,
		arg.ParentID,
		arg.IsDefault,
		arg.UpdatedBy,
		arg.ID,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ParentID,
		&i.IsDefault,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Type,
		&i.Color,
		&i.Icon,
	)
	return i, err
}
