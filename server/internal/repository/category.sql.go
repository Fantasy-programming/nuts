// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: category.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (
    name,
    parent_id,
    is_default,
    created_by
) VALUES (
    $1, $2, $3, $4
) RETURNING id, name, parent_id, is_default, created_by, updated_by, created_at, updated_at, deleted_at, type
`

type CreateCategoryParams struct {
	Name      string     `json:"name"`
	ParentID  *uuid.UUID `json:"parent_id"`
	IsDefault *bool      `json:"is_default"`
	CreatedBy uuid.UUID  `json:"created_by"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, createCategory,
		arg.Name,
		arg.ParentID,
		arg.IsDefault,
		arg.CreatedBy,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ParentID,
		&i.IsDefault,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Type,
	)
	return i, err
}

const createDefaultCategories = `-- name: CreateDefaultCategories :exec
WITH parent_categories AS (
    INSERT INTO categories (
        name,
        is_default,
        created_by
    )
    VALUES
    ('Food & Beverage', TRUE, $1),
    ('Shopping', TRUE, $1),
    ('Housing', TRUE, $1),
    ('Transportation', TRUE, $1),
    ('Vehicle', TRUE, $1),
    ('Life & Entertainment', TRUE, $1),
    ('Communication & PC', TRUE, $1),
    ('Financial Expenses', TRUE, $1),
    ('Investments', TRUE, $1),
    ('Income', TRUE, $1),
    ('Others', TRUE, $1),
    ('Transfers', TRUE, $1)
    RETURNING id, name
),
food_subcategories AS (
    INSERT INTO categories (
        name,
        parent_id,
        is_default,
        created_by
    )
    SELECT
        subcat.name,
        (SELECT id FROM parent_categories WHERE name = 'Food & Beverage'),
        TRUE,
        $1
    FROM (
        VALUES
        ('Bar & Cafe'),
        ('Groceries'),
        ('Restaurant & Fast Food')
    ) AS subcat (name)
),
shopping_subcategories AS (
    INSERT INTO categories (
        name,
        parent_id,
        is_default,
        created_by
    )
    SELECT
        subcat.name,
        (SELECT id FROM parent_categories WHERE name = 'Shopping'),
        TRUE,
        $1
    FROM (
        VALUES
        ('Clothing & Shoes'),
        ('Electronics'),
        ('Health & Beauty'),
        ('Home & Garden'),
        ('Gifts'),
        ('Sports Equipment')
    ) AS subcat (name)
),
housing_subcategories AS (
    INSERT INTO categories (
        name,
        parent_id,
        is_default,
        created_by
    )
    SELECT
        subcat.name,
        (SELECT id FROM parent_categories WHERE name = 'Housing'),
        TRUE,
        $1
    FROM (
        VALUES
        ('Rent'),
        ('Mortgage'),
        ('Utilities'),
        ('Maintenance & Repairs'),
        ('Property Tax')
    ) AS subcat (name)
),
transportation_subcategories AS (
    INSERT INTO categories (
        name,
        parent_id,
        is_default,
        created_by
    )
    SELECT
        subcat.name,
        (SELECT id FROM parent_categories WHERE name = 'Transportation'),
        TRUE,
        $1
    FROM (
        VALUES
        ('Public Transport'),
        ('Taxi & Ride Share'),
        ('Parking'),
        ('Travel')
    ) AS subcat (name)
),
vehicle_subcategories AS (
    INSERT INTO categories (
        name,
        parent_id,
        is_default,
        created_by
    )
    SELECT
        subcat.name,
        (SELECT id FROM parent_categories WHERE name = 'Vehicle'),
        TRUE,
        $1
    FROM (
        VALUES
        ('Fuel'),
        ('Service & Maintenance'),
        ('Insurance'),
        ('Registration & Tax')
    ) AS subcat (name)
),
life_entertainment_subcategories AS (
    INSERT INTO categories (
        name,
        parent_id,
        is_default,
        created_by
    )
    SELECT
        subcat.name,
        (SELECT id FROM parent_categories WHERE name = 'Life & Entertainment'),
        TRUE,
        $1
    FROM (
        VALUES
        ('Entertainment'),
        ('Health & Fitness'),
        ('Hobbies'),
        ('Education'),
        ('Pets'),
        ('Subscriptions')
    ) AS subcat (name)
),
communication_pc_subcategories AS (
    INSERT INTO categories (
        name,
        parent_id,
        is_default,
        created_by
    )
    SELECT
        subcat.name,
        (SELECT id FROM parent_categories WHERE name = 'Communication & PC'),
        TRUE,
        $1
    FROM (
        VALUES
        ('Phone'),
        ('Internet'),
        ('Software & Apps'),
        ('Hardware & Devices')
    ) AS subcat (name)
),
financial_expenses_subcategories AS (
    INSERT INTO categories (
        name,
        parent_id,
        is_default,
        created_by
    )
    SELECT
        subcat.name,
        (SELECT id FROM parent_categories WHERE name = 'Financial Expenses'),
        TRUE,
        $1
    FROM (
        VALUES
        ('Bank Fees'),
        ('Interest'),
        ('Taxes'),
        ('Insurance')
    ) AS subcat (name)
),
investments_subcategories AS (
    INSERT INTO categories (
        name,
        parent_id,
        is_default,
        created_by
    )
    SELECT
        subcat.name,
        (SELECT id FROM parent_categories WHERE name = 'Investments'),
        TRUE,
        $1
    FROM (
        VALUES
        ('Stocks'),
        ('Crypto'),
        ('Real Estate'),
        ('Retirement'),
        ('Savings')
    ) AS subcat (name)
),
income_subcategories AS (
    INSERT INTO categories (
        name,
        parent_id,
        is_default,
        created_by
    )
    SELECT
        subcat.name,
        (SELECT id FROM parent_categories WHERE name = 'Income'),
        TRUE,
        $1
    FROM (
        VALUES
        ('Salary'),
        ('Business'),
        ('Dividends'),
        ('Interest'),
        ('Rental'),
        ('Sale'),
        ('Gifts Received')
    ) AS subcat (name)
)
SELECT 1
`

func (q *Queries) CreateDefaultCategories(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, createDefaultCategories, userID)
	return err
}

const deleteCategory = `-- name: DeleteCategory :exec
UPDATE categories
SET deleted_at = current_timestamp
WHERE id = $1
RETURNING id, name, parent_id, is_default, created_by, updated_by, created_at, updated_at, deleted_at, type
`

func (q *Queries) DeleteCategory(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCategory, id)
	return err
}

const getCategoryById = `-- name: GetCategoryById :one
SELECT id, name, parent_id, is_default, created_by, updated_by, created_at, updated_at, deleted_at, type
FROM categories
WHERE
    id = $1
    AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetCategoryById(ctx context.Context, id uuid.UUID) (Category, error) {
	row := q.db.QueryRow(ctx, getCategoryById, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ParentID,
		&i.IsDefault,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Type,
	)
	return i, err
}

const getCategoryByName = `-- name: GetCategoryByName :one
SELECT id, name, parent_id, is_default, created_by, updated_by, created_at, updated_at, deleted_at, type
FROM categories
WHERE
    name = $1
LIMIT 1
`

func (q *Queries) GetCategoryByName(ctx context.Context, name string) (Category, error) {
	row := q.db.QueryRow(ctx, getCategoryByName, name)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ParentID,
		&i.IsDefault,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Type,
	)
	return i, err
}

const getDefaultCategories = `-- name: GetDefaultCategories :many
SELECT id, name, parent_id, is_default, created_by, updated_by, created_at, updated_at, deleted_at, type
FROM categories
WHERE
    created_by = $1
    AND is_default = TRUE
    AND deleted_at IS NULL
`

func (q *Queries) GetDefaultCategories(ctx context.Context, userID uuid.UUID) ([]Category, error) {
	rows, err := q.db.Query(ctx, getDefaultCategories, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ParentID,
			&i.IsDefault,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCategories = `-- name: ListCategories :many
SELECT id, name, parent_id, is_default, created_by, updated_by, created_at, updated_at, deleted_at, type
FROM categories
WHERE
    created_by = $1
    AND deleted_at IS NULL
`

func (q *Queries) ListCategories(ctx context.Context, userID uuid.UUID) ([]Category, error) {
	rows, err := q.db.Query(ctx, listCategories, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ParentID,
			&i.IsDefault,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listChildCategories = `-- name: ListChildCategories :many
SELECT id, name, parent_id, is_default, created_by, updated_by, created_at, updated_at, deleted_at, type
FROM categories
WHERE
    parent_id = $1
    AND deleted_at IS NULL
`

func (q *Queries) ListChildCategories(ctx context.Context, parentID *uuid.UUID) ([]Category, error) {
	rows, err := q.db.Query(ctx, listChildCategories, parentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ParentID,
			&i.IsDefault,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE categories
SET
    name = coalesce($1, name),
    parent_id = coalesce($2, parent_id),
    is_default = coalesce($3, is_default),
    updated_by = $4
WHERE
    id = $5
    AND deleted_at IS NULL
RETURNING id, name, parent_id, is_default, created_by, updated_by, created_at, updated_at, deleted_at, type
`

type UpdateCategoryParams struct {
	Name      *string    `json:"name"`
	ParentID  *uuid.UUID `json:"parent_id"`
	IsDefault *bool      `json:"is_default"`
	UpdatedBy *uuid.UUID `json:"updated_by"`
	ID        uuid.UUID  `json:"id"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, updateCategory,
		arg.Name,
		arg.ParentID,
		arg.IsDefault,
		arg.UpdatedBy,
		arg.ID,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ParentID,
		&i.IsDefault,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Type,
	)
	return i, err
}
