// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: preferences.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createDefaultPreferences = `-- name: CreateDefaultPreferences :exec
INSERT INTO preferences (
    user_id
) VALUES (
    $1
)
`

func (q *Queries) CreateDefaultPreferences(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, createDefaultPreferences, userID)
	return err
}

const deletePreferences = `-- name: DeletePreferences :exec
UPDATE preferences
SET
    deleted_at = current_timestamp
WHERE
    user_id = $1
    AND deleted_at IS NULL
`

func (q *Queries) DeletePreferences(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePreferences, userID)
	return err
}

const getPreferencesByUserId = `-- name: GetPreferencesByUserId :one
SELECT
    id,
    locale,
    theme,
    timezone,
    time_format,
    date_format,
    currency,
    start_week_on_monday,
    dark_sidebar,
    created_at,
    updated_at
FROM preferences
WHERE
    user_id = $1
    AND deleted_at IS NULL
LIMIT 1
`

type GetPreferencesByUserIdRow struct {
	ID                uuid.UUID `json:"id"`
	Locale            string    `json:"locale"`
	Theme             string    `json:"theme"`
	Timezone          string    `json:"timezone"`
	TimeFormat        string    `json:"time_format"`
	DateFormat        string    `json:"date_format"`
	Currency          string    `json:"currency"`
	StartWeekOnMonday bool      `json:"start_week_on_monday"`
	DarkSidebar       bool      `json:"dark_sidebar"`
	CreatedAt         time.Time `json:"created_at"`
	UpdatedAt         time.Time `json:"updated_at"`
}

func (q *Queries) GetPreferencesByUserId(ctx context.Context, userID uuid.UUID) (GetPreferencesByUserIdRow, error) {
	row := q.db.QueryRow(ctx, getPreferencesByUserId, userID)
	var i GetPreferencesByUserIdRow
	err := row.Scan(
		&i.ID,
		&i.Locale,
		&i.Theme,
		&i.Timezone,
		&i.TimeFormat,
		&i.DateFormat,
		&i.Currency,
		&i.StartWeekOnMonday,
		&i.DarkSidebar,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPreferences = `-- name: ListPreferences :many
SELECT
    id,
    user_id,
    locale,
    theme,
    currency,
    created_at,
    updated_at
FROM preferences
WHERE deleted_at IS NULL
ORDER BY user_id
LIMIT
    $1
    OFFSET $2
`

type ListPreferencesParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

type ListPreferencesRow struct {
	ID        uuid.UUID `json:"id"`
	UserID    uuid.UUID `json:"user_id"`
	Locale    string    `json:"locale"`
	Theme     string    `json:"theme"`
	Currency  string    `json:"currency"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) ListPreferences(ctx context.Context, arg ListPreferencesParams) ([]ListPreferencesRow, error) {
	rows, err := q.db.Query(ctx, listPreferences, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListPreferencesRow{}
	for rows.Next() {
		var i ListPreferencesRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Locale,
			&i.Theme,
			&i.Currency,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePreferences = `-- name: UpdatePreferences :one
UPDATE preferences
SET
    locale = coalesce($1, locale),
    theme = coalesce($2, theme),
    currency = coalesce($3, currency),
    timezone = coalesce($4, timezone),
    time_format = coalesce($5, time_format),
    date_format = coalesce($6, date_format),
    start_week_on_monday = coalesce($7, start_week_on_monday),
    dark_sidebar = coalesce($8, dark_sidebar),
    updated_at = current_timestamp
WHERE
    user_id = $9
    AND deleted_at IS NULL
RETURNING id, user_id, locale, theme, currency, created_at, updated_at, deleted_at, timezone, time_format, date_format, start_week_on_monday, dark_sidebar
`

type UpdatePreferencesParams struct {
	Locale            *string   `json:"locale"`
	Theme             *string   `json:"theme"`
	Currency          *string   `json:"currency"`
	Timezone          *string   `json:"timezone"`
	TimeFormat        *string   `json:"time_format"`
	DateFormat        *string   `json:"date_format"`
	StartWeekOnMonday *bool     `json:"start_week_on_monday"`
	DarkSidebar       *bool     `json:"dark_sidebar"`
	UserID            uuid.UUID `json:"user_id"`
}

func (q *Queries) UpdatePreferences(ctx context.Context, arg UpdatePreferencesParams) (Preference, error) {
	row := q.db.QueryRow(ctx, updatePreferences,
		arg.Locale,
		arg.Theme,
		arg.Currency,
		arg.Timezone,
		arg.TimeFormat,
		arg.DateFormat,
		arg.StartWeekOnMonday,
		arg.DarkSidebar,
		arg.UserID,
	)
	var i Preference
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Locale,
		&i.Theme,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Timezone,
		&i.TimeFormat,
		&i.DateFormat,
		&i.StartWeekOnMonday,
		&i.DarkSidebar,
	)
	return i, err
}
