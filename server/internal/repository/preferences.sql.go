// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: preferences.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createPreferences = `-- name: CreatePreferences :one
INSERT INTO preferences (
    user_id,
    locale,
    theme,
    currency
) VALUES (
    $1, $2, $3, $4
) RETURNING id, user_id, locale, theme, currency, created_at, updated_at, deleted_at
`

type CreatePreferencesParams struct {
	UserID   uuid.UUID `json:"user_id"`
	Locale   string    `json:"locale"`
	Theme    string    `json:"theme"`
	Currency string    `json:"currency"`
}

func (q *Queries) CreatePreferences(ctx context.Context, arg CreatePreferencesParams) (Preference, error) {
	row := q.db.QueryRow(ctx, createPreferences,
		arg.UserID,
		arg.Locale,
		arg.Theme,
		arg.Currency,
	)
	var i Preference
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Locale,
		&i.Theme,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deletePreferences = `-- name: DeletePreferences :exec
UPDATE preferences
SET
    deleted_at = current_timestamp
WHERE
    user_id = $1
    AND deleted_at IS NULL
`

func (q *Queries) DeletePreferences(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePreferences, userID)
	return err
}

const getPreferencesByUserId = `-- name: GetPreferencesByUserId :one
SELECT
    id,
    locale,
    theme,
    currency,
    created_at,
    updated_at
FROM preferences
WHERE
    user_id = $1
    AND deleted_at IS NULL
LIMIT 1
`

type GetPreferencesByUserIdRow struct {
	ID        uuid.UUID `json:"id"`
	Locale    string    `json:"locale"`
	Theme     string    `json:"theme"`
	Currency  string    `json:"currency"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) GetPreferencesByUserId(ctx context.Context, userID uuid.UUID) (GetPreferencesByUserIdRow, error) {
	row := q.db.QueryRow(ctx, getPreferencesByUserId, userID)
	var i GetPreferencesByUserIdRow
	err := row.Scan(
		&i.ID,
		&i.Locale,
		&i.Theme,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPreferences = `-- name: ListPreferences :many
SELECT
    id,
    user_id,
    locale,
    theme,
    currency,
    created_at,
    updated_at
FROM preferences
WHERE deleted_at IS NULL
ORDER BY user_id
LIMIT
    $1
    OFFSET $2
`

type ListPreferencesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListPreferencesRow struct {
	ID        uuid.UUID `json:"id"`
	UserID    uuid.UUID `json:"user_id"`
	Locale    string    `json:"locale"`
	Theme     string    `json:"theme"`
	Currency  string    `json:"currency"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) ListPreferences(ctx context.Context, arg ListPreferencesParams) ([]ListPreferencesRow, error) {
	rows, err := q.db.Query(ctx, listPreferences, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListPreferencesRow{}
	for rows.Next() {
		var i ListPreferencesRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Locale,
			&i.Theme,
			&i.Currency,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePreferences = `-- name: UpdatePreferences :one
UPDATE preferences
SET
    locale = coalesce($1, locale),
    theme = coalesce($2, theme),
    currency = coalesce($3, currency),
    updated_at = current_timestamp
WHERE
    user_id = $4
    AND deleted_at IS NULL
RETURNING id, user_id, locale, theme, currency, created_at, updated_at, deleted_at
`

type UpdatePreferencesParams struct {
	Locale   *string   `json:"locale"`
	Theme    *string   `json:"theme"`
	Currency *string   `json:"currency"`
	UserID   uuid.UUID `json:"user_id"`
}

func (q *Queries) UpdatePreferences(ctx context.Context, arg UpdatePreferencesParams) (Preference, error) {
	row := q.db.QueryRow(ctx, updatePreferences,
		arg.Locale,
		arg.Theme,
		arg.Currency,
		arg.UserID,
	)
	var i Preference
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Locale,
		&i.Theme,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
