// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: copyfrom.go

package repository

import (
	"context"
)

// iteratorForBatchCreateAccount implements pgx.CopyFromSource.
type iteratorForBatchCreateAccount struct {
	rows                 []BatchCreateAccountParams
	skippedFirstNextCall bool
}

func (r *iteratorForBatchCreateAccount) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForBatchCreateAccount) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].CreatedBy,
		r.rows[0].Name,
		r.rows[0].Type,
		r.rows[0].Subtype,
		r.rows[0].Balance,
		r.rows[0].Currency,
		r.rows[0].Color,
		r.rows[0].Meta,
		r.rows[0].ConnectionID,
		r.rows[0].IsExternal,
		r.rows[0].ProviderAccountID,
		r.rows[0].ProviderName,
	}, nil
}

func (r iteratorForBatchCreateAccount) Err() error {
	return nil
}

func (q *Queries) BatchCreateAccount(ctx context.Context, arg []BatchCreateAccountParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"accounts"}, []string{"created_by", "name", "type", "subtype", "balance", "currency", "color", "meta", "connection_id", "is_external", "provider_account_id", "provider_name"}, &iteratorForBatchCreateAccount{rows: arg})
}

// iteratorForBatchCreateTransaction implements pgx.CopyFromSource.
type iteratorForBatchCreateTransaction struct {
	rows                 []BatchCreateTransactionParams
	skippedFirstNextCall bool
}

func (r *iteratorForBatchCreateTransaction) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForBatchCreateTransaction) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Amount,
		r.rows[0].Type,
		r.rows[0].AccountID,
		r.rows[0].DestinationAccountID,
		r.rows[0].CategoryID,
		r.rows[0].Description,
		r.rows[0].TransactionDatetime,
		r.rows[0].Details,
		r.rows[0].ProviderTransactionID,
		r.rows[0].IsExternal,
		r.rows[0].CreatedBy,
	}, nil
}

func (r iteratorForBatchCreateTransaction) Err() error {
	return nil
}

func (q *Queries) BatchCreateTransaction(ctx context.Context, arg []BatchCreateTransactionParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"transactions"}, []string{"amount", "type", "account_id", "destination_account_id", "category_id", "description", "transaction_datetime", "details", "provider_transaction_id", "is_external", "created_by"}, &iteratorForBatchCreateTransaction{rows: arg})
}
