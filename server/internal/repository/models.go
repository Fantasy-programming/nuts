// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package repository

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/Fantasy-Programming/nuts/server/internal/repository/dto"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type ACCOUNTTYPE string

const (
	ACCOUNTTYPECash       ACCOUNTTYPE = "cash"
	ACCOUNTTYPEMomo       ACCOUNTTYPE = "momo"
	ACCOUNTTYPECredit     ACCOUNTTYPE = "credit"
	ACCOUNTTYPEInvestment ACCOUNTTYPE = "investment"
	ACCOUNTTYPEChecking   ACCOUNTTYPE = "checking"
	ACCOUNTTYPESavings    ACCOUNTTYPE = "savings"
	ACCOUNTTYPELoan       ACCOUNTTYPE = "loan"
	ACCOUNTTYPEOther      ACCOUNTTYPE = "other"
)

func (e *ACCOUNTTYPE) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ACCOUNTTYPE(s)
	case string:
		*e = ACCOUNTTYPE(s)
	default:
		return fmt.Errorf("unsupported scan type for ACCOUNTTYPE: %T", src)
	}
	return nil
}

type NullACCOUNTTYPE struct {
	ACCOUNTTYPE ACCOUNTTYPE `json:"ACCOUNT_TYPE"`
	Valid       bool        `json:"valid"` // Valid is true if ACCOUNTTYPE is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullACCOUNTTYPE) Scan(value interface{}) error {
	if value == nil {
		ns.ACCOUNTTYPE, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ACCOUNTTYPE.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullACCOUNTTYPE) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ACCOUNTTYPE), nil
}

func (e ACCOUNTTYPE) Valid() bool {
	switch e {
	case ACCOUNTTYPECash,
		ACCOUNTTYPEMomo,
		ACCOUNTTYPECredit,
		ACCOUNTTYPEInvestment,
		ACCOUNTTYPEChecking,
		ACCOUNTTYPESavings,
		ACCOUNTTYPELoan,
		ACCOUNTTYPEOther:
		return true
	}
	return false
}

type RiverJobState string

const (
	RiverJobStateAvailable RiverJobState = "available"
	RiverJobStateCancelled RiverJobState = "cancelled"
	RiverJobStateCompleted RiverJobState = "completed"
	RiverJobStateDiscarded RiverJobState = "discarded"
	RiverJobStatePending   RiverJobState = "pending"
	RiverJobStateRetryable RiverJobState = "retryable"
	RiverJobStateRunning   RiverJobState = "running"
	RiverJobStateScheduled RiverJobState = "scheduled"
)

func (e *RiverJobState) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RiverJobState(s)
	case string:
		*e = RiverJobState(s)
	default:
		return fmt.Errorf("unsupported scan type for RiverJobState: %T", src)
	}
	return nil
}

type NullRiverJobState struct {
	RiverJobState RiverJobState `json:"river_job_state"`
	Valid         bool          `json:"valid"` // Valid is true if RiverJobState is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRiverJobState) Scan(value interface{}) error {
	if value == nil {
		ns.RiverJobState, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RiverJobState.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRiverJobState) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RiverJobState), nil
}

func (e RiverJobState) Valid() bool {
	switch e {
	case RiverJobStateAvailable,
		RiverJobStateCancelled,
		RiverJobStateCompleted,
		RiverJobStateDiscarded,
		RiverJobStatePending,
		RiverJobStateRetryable,
		RiverJobStateRunning,
		RiverJobStateScheduled:
		return true
	}
	return false
}

type Account struct {
	ID                uuid.UUID          `json:"id"`
	Name              string             `json:"name"`
	Type              ACCOUNTTYPE        `json:"type"`
	Balance           pgtype.Numeric     `json:"balance"`
	Currency          string             `json:"currency"`
	Meta              []byte             `json:"meta"`
	CreatedBy         *uuid.UUID         `json:"created_by"`
	UpdatedBy         *uuid.UUID         `json:"updated_by"`
	CreatedAt         time.Time          `json:"created_at"`
	UpdatedAt         time.Time          `json:"updated_at"`
	DeletedAt         pgtype.Timestamptz `json:"deleted_at"`
	IsExternal        *bool              `json:"is_external"`
	ProviderAccountID *string            `json:"provider_account_id"`
	ProviderName      *string            `json:"provider_name"`
	SyncStatus        *string            `json:"sync_status"`
	LastSyncedAt      pgtype.Timestamptz `json:"last_synced_at"`
	ConnectionID      *uuid.UUID         `json:"connection_id"`
	Subtype           *string            `json:"subtype"`
	SharedFinanceID   *uuid.UUID         `json:"shared_finance_id"`
}

type Budget struct {
	ID              uuid.UUID          `json:"id"`
	UserID          uuid.UUID          `json:"user_id"`
	CategoryID      uuid.UUID          `json:"category_id"`
	Amount          pgtype.Numeric     `json:"amount"`
	StartDate       pgtype.Date        `json:"start_date"`
	EndDate         pgtype.Date        `json:"end_date"`
	Frequency       string             `json:"frequency"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `json:"updated_at"`
	SharedFinanceID *uuid.UUID         `json:"shared_finance_id"`
	Name            *string            `json:"name"`
}

type Category struct {
	ID        uuid.UUID          `json:"id"`
	Name      string             `json:"name"`
	ParentID  *uuid.UUID         `json:"parent_id"`
	IsDefault *bool              `json:"is_default"`
	CreatedBy uuid.UUID          `json:"created_by"`
	UpdatedBy *uuid.UUID         `json:"updated_by"`
	CreatedAt time.Time          `json:"created_at"`
	UpdatedAt time.Time          `json:"updated_at"`
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
	Type      string             `json:"type"`
}

type Currency struct {
	Code string `json:"code"`
	Name string `json:"name"`
}

type ExchangeRate struct {
	ID            uuid.UUID      `json:"id"`
	FromCurrency  string         `json:"from_currency"`
	ToCurrency    string         `json:"to_currency"`
	Rate          pgtype.Numeric `json:"rate"`
	EffectiveDate pgtype.Date    `json:"effective_date"`
	CreatedAt     time.Time      `json:"created_at"`
	UpdatedAt     time.Time      `json:"updated_at"`
}

type FinancialGoal struct {
	ID            uuid.UUID          `json:"id"`
	UserID        uuid.UUID          `json:"user_id"`
	Name          string             `json:"name"`
	Type          string             `json:"type"`
	TargetAmount  pgtype.Numeric     `json:"target_amount"`
	CurrentAmount pgtype.Numeric     `json:"current_amount"`
	TargetDate    pgtype.Date        `json:"target_date"`
	Priority      *string            `json:"priority"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
}

type LinkedAccount struct {
	ID             uuid.UUID `json:"id"`
	UserID         uuid.UUID `json:"user_id"`
	Provider       string    `json:"provider"`
	ProviderUserID string    `json:"provider_user_id"`
	Email          *string   `json:"email"`
	CreatedAt      time.Time `json:"created_at"`
}

type Preference struct {
	ID                uuid.UUID          `json:"id"`
	UserID            uuid.UUID          `json:"user_id"`
	Locale            string             `json:"locale"`
	Theme             string             `json:"theme"`
	Currency          string             `json:"currency"`
	CreatedAt         time.Time          `json:"created_at"`
	UpdatedAt         time.Time          `json:"updated_at"`
	DeletedAt         pgtype.Timestamptz `json:"deleted_at"`
	Timezone          string             `json:"timezone"`
	TimeFormat        string             `json:"time_format"`
	DateFormat        string             `json:"date_format"`
	StartWeekOnMonday bool               `json:"start_week_on_monday"`
	DarkSidebar       bool               `json:"dark_sidebar"`
}

type RiverClient struct {
	ID        string             `json:"id"`
	CreatedAt time.Time          `json:"created_at"`
	Metadata  []byte             `json:"metadata"`
	PausedAt  pgtype.Timestamptz `json:"paused_at"`
	UpdatedAt time.Time          `json:"updated_at"`
}

type RiverClientQueue struct {
	RiverClientID    string    `json:"river_client_id"`
	Name             string    `json:"name"`
	CreatedAt        time.Time `json:"created_at"`
	MaxWorkers       int64     `json:"max_workers"`
	Metadata         []byte    `json:"metadata"`
	NumJobsCompleted int64     `json:"num_jobs_completed"`
	NumJobsRunning   int64     `json:"num_jobs_running"`
	UpdatedAt        time.Time `json:"updated_at"`
}

type RiverJob struct {
	ID           int64              `json:"id"`
	State        RiverJobState      `json:"state"`
	Attempt      int16              `json:"attempt"`
	MaxAttempts  int16              `json:"max_attempts"`
	AttemptedAt  pgtype.Timestamptz `json:"attempted_at"`
	CreatedAt    time.Time          `json:"created_at"`
	FinalizedAt  pgtype.Timestamptz `json:"finalized_at"`
	ScheduledAt  time.Time          `json:"scheduled_at"`
	Priority     int16              `json:"priority"`
	Args         []byte             `json:"args"`
	AttemptedBy  []string           `json:"attempted_by"`
	Errors       [][]byte           `json:"errors"`
	Kind         string             `json:"kind"`
	Metadata     []byte             `json:"metadata"`
	Queue        string             `json:"queue"`
	Tags         []string           `json:"tags"`
	UniqueKey    []byte             `json:"unique_key"`
	UniqueStates pgtype.Bits        `json:"unique_states"`
}

type RiverLeader struct {
	ElectedAt time.Time `json:"elected_at"`
	ExpiresAt time.Time `json:"expires_at"`
	LeaderID  string    `json:"leader_id"`
	Name      string    `json:"name"`
}

type RiverQueue struct {
	Name      string             `json:"name"`
	CreatedAt time.Time          `json:"created_at"`
	Metadata  []byte             `json:"metadata"`
	PausedAt  pgtype.Timestamptz `json:"paused_at"`
	UpdatedAt time.Time          `json:"updated_at"`
}

type SharedFinance struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	OwnerUserID uuid.UUID `json:"owner_user_id"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

type SharedFinanceMember struct {
	SharedFinanceID uuid.UUID `json:"shared_finance_id"`
	UserID          uuid.UUID `json:"user_id"`
	Role            string    `json:"role"`
}

type Tag struct {
	ID        uuid.UUID `json:"id"`
	UserID    uuid.UUID `json:"user_id"`
	Name      string    `json:"name"`
	Color     string    `json:"color"`
	CreatedAt time.Time `json:"created_at"`
}

type Transaction struct {
	ID                    uuid.UUID          `json:"id"`
	Amount                pgtype.Numeric     `json:"amount"`
	Type                  string             `json:"type"`
	AccountID             uuid.UUID          `json:"account_id"`
	CategoryID            *uuid.UUID         `json:"category_id"`
	DestinationAccountID  *uuid.UUID         `json:"destination_account_id"`
	TransactionDatetime   time.Time          `json:"transaction_datetime"`
	Description           *string            `json:"description"`
	Details               dto.Details        `json:"details"`
	CreatedBy             *uuid.UUID         `json:"created_by"`
	UpdatedBy             *uuid.UUID         `json:"updated_by"`
	CreatedAt             time.Time          `json:"created_at"`
	UpdatedAt             time.Time          `json:"updated_at"`
	DeletedAt             pgtype.Timestamptz `json:"deleted_at"`
	IsExternal            *bool              `json:"is_external"`
	ProviderTransactionID *string            `json:"provider_transaction_id"`
	TransactionCurrency   string             `json:"transaction_currency"`
	OriginalAmount        pgtype.Numeric     `json:"original_amount"`
	ExchangeRate          pgtype.Numeric     `json:"exchange_rate"`
	ExchangeRateDate      pgtype.Date        `json:"exchange_rate_date"`
	IsCategorized         *bool              `json:"is_categorized"`
	SharedFinanceID       *uuid.UUID         `json:"shared_finance_id"`
}

type User struct {
	ID            uuid.UUID          `json:"id"`
	Email         string             `json:"email"`
	FirstName     *string            `json:"first_name"`
	LastName      *string            `json:"last_name"`
	Password      *string            `json:"password"`
	CreatedAt     time.Time          `json:"created_at"`
	UpdatedAt     time.Time          `json:"updated_at"`
	DeletedAt     pgtype.Timestamptz `json:"deleted_at"`
	AvatarUrl     *string            `json:"avatar_url"`
	MfaSecret     []byte             `json:"mfa_secret"`
	MfaEnabled    bool               `json:"mfa_enabled"`
	MfaVerifiedAt pgtype.Timestamptz `json:"mfa_verified_at"`
}

type UserFinancialConnection struct {
	ID                   uuid.UUID          `json:"id"`
	UserID               uuid.UUID          `json:"user_id"`
	ProviderName         string             `json:"provider_name"`
	AccessTokenEncrypted []byte             `json:"access_token_encrypted"`
	ItemID               *string            `json:"item_id"`
	InstitutionID        *string            `json:"institution_id"`
	InstitutionName      *string            `json:"institution_name"`
	Status               *string            `json:"status"`
	LastSyncAt           pgtype.Timestamptz `json:"last_sync_at"`
	ExpiresAt            pgtype.Timestamptz `json:"expires_at"`
	CreatedAt            time.Time          `json:"created_at"`
	UpdatedAt            time.Time          `json:"updated_at"`
}

type UserToken struct {
	ID           uuid.UUID          `json:"id"`
	UserID       uuid.UUID          `json:"user_id"`
	RefreshToken string             `json:"refresh_token"`
	ExpiresAt    time.Time          `json:"expires_at"`
	LastUsedAt   time.Time          `json:"last_used_at"`
	UserAgent    *string            `json:"user_agent"`
	IpAddress    *string            `json:"ip_address"`
	IsCurrent    *bool              `json:"is_current"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	Location     *string            `json:"location"`
	BrowserName  *string            `json:"browser_name"`
	DeviceName   *string            `json:"device_name"`
	OsName       *string            `json:"os_name"`
	Revoked      *bool              `json:"revoked"`
}

type WebhookEvent struct {
	ID             uuid.UUID        `json:"id"`
	SubscriptionID uuid.UUID        `json:"subscription_id"`
	EventType      string           `json:"event_type"`
	Payload        []byte           `json:"payload"`
	Status         *string          `json:"status"`
	Attempts       *int32           `json:"attempts"`
	LastAttempt    pgtype.Timestamp `json:"last_attempt"`
	CreatedAt      pgtype.Timestamp `json:"created_at"`
}

type WebhookSubscription struct {
	ID          uuid.UUID        `json:"id"`
	UserID      uuid.UUID        `json:"user_id"`
	Event       []string         `json:"event"`
	Active      bool             `json:"active"`
	EndpointUrl string           `json:"endpoint_url"`
	Secret      string           `json:"secret"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
}
