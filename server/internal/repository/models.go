// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package repository

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/Fantasy-Programming/nuts/internal/repository/dto"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type ACCOUNTTYPE string

const (
	ACCOUNTTYPECash   ACCOUNTTYPE = "cash"
	ACCOUNTTYPEMomo   ACCOUNTTYPE = "momo"
	ACCOUNTTYPECredit ACCOUNTTYPE = "credit"
)

func (e *ACCOUNTTYPE) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ACCOUNTTYPE(s)
	case string:
		*e = ACCOUNTTYPE(s)
	default:
		return fmt.Errorf("unsupported scan type for ACCOUNTTYPE: %T", src)
	}
	return nil
}

type NullACCOUNTTYPE struct {
	ACCOUNTTYPE ACCOUNTTYPE `json:"ACCOUNT_TYPE"`
	Valid       bool        `json:"valid"` // Valid is true if ACCOUNTTYPE is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullACCOUNTTYPE) Scan(value interface{}) error {
	if value == nil {
		ns.ACCOUNTTYPE, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ACCOUNTTYPE.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullACCOUNTTYPE) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ACCOUNTTYPE), nil
}

func (e ACCOUNTTYPE) Valid() bool {
	switch e {
	case ACCOUNTTYPECash,
		ACCOUNTTYPEMomo,
		ACCOUNTTYPECredit:
		return true
	}
	return false
}

type COLORENUM string

const (
	COLORENUMRed   COLORENUM = "red"
	COLORENUMGreen COLORENUM = "green"
	COLORENUMBlue  COLORENUM = "blue"
)

func (e *COLORENUM) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = COLORENUM(s)
	case string:
		*e = COLORENUM(s)
	default:
		return fmt.Errorf("unsupported scan type for COLORENUM: %T", src)
	}
	return nil
}

type NullCOLORENUM struct {
	COLORENUM COLORENUM `json:"COLOR_ENUM"`
	Valid     bool      `json:"valid"` // Valid is true if COLORENUM is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCOLORENUM) Scan(value interface{}) error {
	if value == nil {
		ns.COLORENUM, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.COLORENUM.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCOLORENUM) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.COLORENUM), nil
}

func (e COLORENUM) Valid() bool {
	switch e {
	case COLORENUMRed,
		COLORENUMGreen,
		COLORENUMBlue:
		return true
	}
	return false
}

type Account struct {
	ID        uuid.UUID          `json:"id"`
	Name      string             `json:"name"`
	Type      ACCOUNTTYPE        `json:"type"`
	Balance   pgtype.Numeric     `json:"balance"`
	Currency  string             `json:"currency"`
	Color     COLORENUM          `json:"color"`
	Meta      []byte             `json:"meta"`
	CreatedBy *uuid.UUID         `json:"created_by"`
	UpdatedBy *uuid.UUID         `json:"updated_by"`
	CreatedAt time.Time          `json:"created_at"`
	UpdatedAt time.Time          `json:"updated_at"`
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
}

type Category struct {
	ID        uuid.UUID          `json:"id"`
	Name      string             `json:"name"`
	ParentID  *uuid.UUID         `json:"parent_id"`
	IsDefault *bool              `json:"is_default"`
	CreatedBy uuid.UUID          `json:"created_by"`
	UpdatedBy *uuid.UUID         `json:"updated_by"`
	CreatedAt time.Time          `json:"created_at"`
	UpdatedAt time.Time          `json:"updated_at"`
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
}

type Currency struct {
	Code string  `json:"code"`
	Name *string `json:"name"`
}

type Preference struct {
	ID        uuid.UUID          `json:"id"`
	UserID    uuid.UUID          `json:"user_id"`
	Locale    string             `json:"locale"`
	Theme     string             `json:"theme"`
	Currency  string             `json:"currency"`
	CreatedAt time.Time          `json:"created_at"`
	UpdatedAt time.Time          `json:"updated_at"`
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
}

type Tag struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
	Name   string    `json:"name"`
	Color  COLORENUM `json:"color"`
}

type Transaction struct {
	ID                   uuid.UUID          `json:"id"`
	Amount               pgtype.Numeric     `json:"amount"`
	Type                 string             `json:"type"`
	AccountID            uuid.UUID          `json:"account_id"`
	CategoryID           uuid.UUID          `json:"category_id"`
	DestinationAccountID *uuid.UUID         `json:"destination_account_id"`
	TransactionDatetime  time.Time          `json:"transaction_datetime"`
	Description          *string            `json:"description"`
	Details              dto.Details        `json:"details"`
	CreatedBy            *uuid.UUID         `json:"created_by"`
	UpdatedBy            *uuid.UUID         `json:"updated_by"`
	CreatedAt            time.Time          `json:"created_at"`
	UpdatedAt            time.Time          `json:"updated_at"`
	DeletedAt            pgtype.Timestamptz `json:"deleted_at"`
}

type User struct {
	ID        uuid.UUID          `json:"id"`
	Email     string             `json:"email"`
	FirstName *string            `json:"first_name"`
	LastName  *string            `json:"last_name"`
	Password  string             `json:"password"`
	CreatedAt time.Time          `json:"created_at"`
	UpdatedAt time.Time          `json:"updated_at"`
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
	AvatarUrl *string            `json:"avatar_url"`
}
