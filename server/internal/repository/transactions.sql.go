// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: transactions.sql

package repository

import (
	"context"
	"time"

	"github.com/Fantasy-Programming/nuts/server/internal/repository/dto"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type BatchCreateTransactionParams struct {
	Amount                pgtype.Numeric     `json:"amount"`
	Type                  string             `json:"type"`
	AccountID             uuid.UUID          `json:"account_id"`
	DestinationAccountID  *uuid.UUID         `json:"destination_account_id"`
	CategoryID            uuid.UUID          `json:"category_id"`
	Description           *string            `json:"description"`
	TransactionDatetime   pgtype.Timestamptz `json:"transaction_datetime"`
	Details               dto.Details        `json:"details"`
	ProviderTransactionID *string            `json:"provider_transaction_id"`
	IsExternal            *bool              `json:"is_external"`
	CreatedBy             *uuid.UUID         `json:"created_by"`
}

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
    amount,
    type,
    account_id,
    destination_account_id,
    category_id,
    description,
    transaction_datetime,
    details,
    provider_transaction_id,
    is_external,
    created_by
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
) RETURNING id, amount, type, account_id, category_id, destination_account_id, transaction_datetime, description, details, created_by, updated_by, created_at, updated_at, deleted_at, is_external, provider_transaction_id
`

type CreateTransactionParams struct {
	Amount                pgtype.Numeric     `json:"amount"`
	Type                  string             `json:"type"`
	AccountID             uuid.UUID          `json:"account_id"`
	DestinationAccountID  *uuid.UUID         `json:"destination_account_id"`
	CategoryID            uuid.UUID          `json:"category_id"`
	Description           *string            `json:"description"`
	TransactionDatetime   pgtype.Timestamptz `json:"transaction_datetime"`
	Details               dto.Details        `json:"details"`
	ProviderTransactionID *string            `json:"provider_transaction_id"`
	IsExternal            *bool              `json:"is_external"`
	CreatedBy             *uuid.UUID         `json:"created_by"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, createTransaction,
		arg.Amount,
		arg.Type,
		arg.AccountID,
		arg.DestinationAccountID,
		arg.CategoryID,
		arg.Description,
		arg.TransactionDatetime,
		arg.Details,
		arg.ProviderTransactionID,
		arg.IsExternal,
		arg.CreatedBy,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Type,
		&i.AccountID,
		&i.CategoryID,
		&i.DestinationAccountID,
		&i.TransactionDatetime,
		&i.Description,
		&i.Details,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsExternal,
		&i.ProviderTransactionID,
	)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
UPDATE transactions
SET deleted_at = current_timestamp
WHERE id = $1
RETURNING id, amount, type, account_id, category_id, destination_account_id, transaction_datetime, description, details, created_by, updated_by, created_at, updated_at, deleted_at, is_external, provider_transaction_id
`

func (q *Queries) DeleteTransaction(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteTransaction, id)
	return err
}

const getCategorySpending = `-- name: GetCategorySpending :many
SELECT
    c.name AS category_name,
    sum(t.amount) AS total_amount,
    count(*) AS transaction_count
FROM transactions t
JOIN categories c ON t.category_id = c.id
WHERE
    t.created_by = $1
    AND t.type = 'expense'
    AND t.transaction_datetime BETWEEN $2 AND $3
    AND t.deleted_at IS NULL
    AND c.deleted_at IS NULL
GROUP BY c.id, c.name
ORDER BY total_amount DESC
`

type GetCategorySpendingParams struct {
	UserID    *uuid.UUID         `json:"user_id"`
	StartDate pgtype.Timestamptz `json:"start_date"`
	EndDate   pgtype.Timestamptz `json:"end_date"`
}

type GetCategorySpendingRow struct {
	CategoryName     string         `json:"category_name"`
	TotalAmount      pgtype.Numeric `json:"total_amount"`
	TransactionCount int64          `json:"transaction_count"`
}

func (q *Queries) GetCategorySpending(ctx context.Context, arg GetCategorySpendingParams) ([]GetCategorySpendingRow, error) {
	rows, err := q.db.Query(ctx, getCategorySpending, arg.UserID, arg.StartDate, arg.EndDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCategorySpendingRow{}
	for rows.Next() {
		var i GetCategorySpendingRow
		if err := rows.Scan(&i.CategoryName, &i.TotalAmount, &i.TransactionCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionById = `-- name: GetTransactionById :one
SELECT id, amount, type, account_id, category_id, destination_account_id, transaction_datetime, description, details, created_by, updated_by, created_at, updated_at, deleted_at, is_external, provider_transaction_id
FROM transactions
WHERE
    id = $1
    AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetTransactionById(ctx context.Context, id uuid.UUID) (Transaction, error) {
	row := q.db.QueryRow(ctx, getTransactionById, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Type,
		&i.AccountID,
		&i.CategoryID,
		&i.DestinationAccountID,
		&i.TransactionDatetime,
		&i.Description,
		&i.Details,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsExternal,
		&i.ProviderTransactionID,
	)
	return i, err
}

const getTransactionStats = `-- name: GetTransactionStats :one
SELECT
    count(*) AS total_count,
    sum(CASE WHEN type = 'income' THEN amount ELSE 0 END) AS total_income,
    sum(CASE WHEN type = 'expense' THEN amount ELSE 0 END) AS total_expenses,
    sum(CASE WHEN type = 'transfer' THEN amount ELSE 0 END) AS total_transfers
FROM transactions
WHERE
    created_by = $1
    AND transaction_datetime BETWEEN $2::timestamptz AND $3::timestamptz
    AND deleted_at IS NULL
`

type GetTransactionStatsParams struct {
	UserID    *uuid.UUID `json:"user_id"`
	StartDate time.Time  `json:"start_date"`
	EndDate   time.Time  `json:"end_date"`
}

type GetTransactionStatsRow struct {
	TotalCount     int64          `json:"total_count"`
	TotalIncome    pgtype.Numeric `json:"total_income"`
	TotalExpenses  pgtype.Numeric `json:"total_expenses"`
	TotalTransfers pgtype.Numeric `json:"total_transfers"`
}

func (q *Queries) GetTransactionStats(ctx context.Context, arg GetTransactionStatsParams) (GetTransactionStatsRow, error) {
	row := q.db.QueryRow(ctx, getTransactionStats, arg.UserID, arg.StartDate, arg.EndDate)
	var i GetTransactionStatsRow
	err := row.Scan(
		&i.TotalCount,
		&i.TotalIncome,
		&i.TotalExpenses,
		&i.TotalTransfers,
	)
	return i, err
}

const listTransactions = `-- name: ListTransactions :many
SELECT
    transactions.id,
    transactions.amount,
    transactions.type,
    transactions.destination_account_id,
    transactions.transaction_datetime,
    transactions.description,
    transactions.details,
    transactions.updated_at,
    categories.id, categories.name, categories.parent_id, categories.is_default, categories.created_by, categories.updated_by, categories.created_at, categories.updated_at, categories.deleted_at,
    accounts.id, accounts.name, accounts.type, accounts.balance, accounts.currency, accounts.color, accounts.meta, accounts.created_by, accounts.updated_by, accounts.created_at, accounts.updated_at, accounts.deleted_at, accounts.is_external, accounts.provider_account_id, accounts.provider_name, accounts.sync_status, accounts.last_synced_at, accounts.connection_id
FROM transactions
JOIN categories ON transactions.category_id = categories.id
JOIN accounts ON transactions.account_id = accounts.id
WHERE
    transactions.created_by = $1
    AND transactions.deleted_at IS NULL
    AND ($2::text IS NULL OR transactions.type = $2)
    AND ($3::timestamptz IS NULL OR transactions.transaction_datetime >= $3::timestamptz)
    AND ($4::timestamptz IS NULL OR transactions.transaction_datetime <= $4::timestamptz)
    AND ($5::uuid IS NULL OR transactions.account_id = $5::uuid)
ORDER BY transactions.transaction_datetime DESC
LIMIT CASE
    WHEN $7::integer IS NULL THEN 50
    ELSE $7::integer
END
OFFSET $6::integer
`

type ListTransactionsParams struct {
	UserID    *uuid.UUID         `json:"user_id"`
	Type      *string            `json:"type"`
	StartDate pgtype.Timestamptz `json:"start_date"`
	EndDate   pgtype.Timestamptz `json:"end_date"`
	AccountID *uuid.UUID         `json:"account_id"`
	Offset    int32              `json:"offset"`
	Limit     *int32             `json:"limit"`
}

type ListTransactionsRow struct {
	ID                   uuid.UUID      `json:"id"`
	Amount               pgtype.Numeric `json:"amount"`
	Type                 string         `json:"type"`
	DestinationAccountID *uuid.UUID     `json:"destination_account_id"`
	TransactionDatetime  time.Time      `json:"transaction_datetime"`
	Description          *string        `json:"description"`
	Details              dto.Details    `json:"details"`
	UpdatedAt            time.Time      `json:"updated_at"`
	Category             Category       `json:"category"`
	Account              Account        `json:"account"`
}

func (q *Queries) ListTransactions(ctx context.Context, arg ListTransactionsParams) ([]ListTransactionsRow, error) {
	rows, err := q.db.Query(ctx, listTransactions,
		arg.UserID,
		arg.Type,
		arg.StartDate,
		arg.EndDate,
		arg.AccountID,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListTransactionsRow{}
	for rows.Next() {
		var i ListTransactionsRow
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.Type,
			&i.DestinationAccountID,
			&i.TransactionDatetime,
			&i.Description,
			&i.Details,
			&i.UpdatedAt,
			&i.Category.ID,
			&i.Category.Name,
			&i.Category.ParentID,
			&i.Category.IsDefault,
			&i.Category.CreatedBy,
			&i.Category.UpdatedBy,
			&i.Category.CreatedAt,
			&i.Category.UpdatedAt,
			&i.Category.DeletedAt,
			&i.Account.ID,
			&i.Account.Name,
			&i.Account.Type,
			&i.Account.Balance,
			&i.Account.Currency,
			&i.Account.Color,
			&i.Account.Meta,
			&i.Account.CreatedBy,
			&i.Account.UpdatedBy,
			&i.Account.CreatedAt,
			&i.Account.UpdatedAt,
			&i.Account.DeletedAt,
			&i.Account.IsExternal,
			&i.Account.ProviderAccountID,
			&i.Account.ProviderName,
			&i.Account.SyncStatus,
			&i.Account.LastSyncedAt,
			&i.Account.ConnectionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransactionsByAccount = `-- name: ListTransactionsByAccount :many


SELECT id, amount, type, account_id, category_id, destination_account_id, transaction_datetime, description, details, created_by, updated_by, created_at, updated_at, deleted_at, is_external, provider_transaction_id
FROM transactions
WHERE
    account_id = $1
    AND deleted_at IS NULL
ORDER BY transaction_datetime DESC
`

// SELECT
// FROM transactions
// JOIN categories ON transactions.category_id = categories.id
// JOIN accounts ON transactions.account_id = accounts.id
// LEFT JOIN accounts ON transactions.destination_account_id = accounts.id
// WHERE
//
//	transactions.created_by = sqlc.arg('user_id')
//	AND transactions.deleted_at IS NULL
//
// ORDER BY transactions.transaction_datetime DESC;
func (q *Queries) ListTransactionsByAccount(ctx context.Context, accountID uuid.UUID) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, listTransactionsByAccount, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.Type,
			&i.AccountID,
			&i.CategoryID,
			&i.DestinationAccountID,
			&i.TransactionDatetime,
			&i.Description,
			&i.Details,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.IsExternal,
			&i.ProviderTransactionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransactionsByCategory = `-- name: ListTransactionsByCategory :many
SELECT id, amount, type, account_id, category_id, destination_account_id, transaction_datetime, description, details, created_by, updated_by, created_at, updated_at, deleted_at, is_external, provider_transaction_id
FROM transactions
WHERE
    category_id = $1
    AND deleted_at IS NULL
ORDER BY transaction_datetime DESC
`

func (q *Queries) ListTransactionsByCategory(ctx context.Context, categoryID uuid.UUID) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, listTransactionsByCategory, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.Type,
			&i.AccountID,
			&i.CategoryID,
			&i.DestinationAccountID,
			&i.TransactionDatetime,
			&i.Description,
			&i.Details,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.IsExternal,
			&i.ProviderTransactionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransactionsByDateRange = `-- name: ListTransactionsByDateRange :many
SELECT id, amount, type, account_id, category_id, destination_account_id, transaction_datetime, description, details, created_by, updated_by, created_at, updated_at, deleted_at, is_external, provider_transaction_id
FROM transactions
WHERE
    created_by = $1::uuid
    AND transaction_datetime BETWEEN $2::timestamptz AND $3::timestamptz
    AND deleted_at IS NULL
ORDER BY transaction_datetime DESC
`

type ListTransactionsByDateRangeParams struct {
	UserID    uuid.UUID `json:"user_id"`
	StartDate time.Time `json:"start_date"`
	EndDate   time.Time `json:"end_date"`
}

func (q *Queries) ListTransactionsByDateRange(ctx context.Context, arg ListTransactionsByDateRangeParams) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, listTransactionsByDateRange, arg.UserID, arg.StartDate, arg.EndDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.Type,
			&i.AccountID,
			&i.CategoryID,
			&i.DestinationAccountID,
			&i.TransactionDatetime,
			&i.Description,
			&i.Details,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.IsExternal,
			&i.ProviderTransactionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransaction = `-- name: UpdateTransaction :one
UPDATE transactions
SET
    amount = coalesce($1, amount),
    type = coalesce($2, type),
    account_id = coalesce($3, account_id),
    category_id = coalesce($4, category_id),
    description = coalesce($5, description),
    transaction_datetime = coalesce($6, transaction_datetime),
    details = coalesce($7, details),
    updated_by = $8
WHERE
    id = $9
    AND deleted_at IS NULL
RETURNING id, amount, type, account_id, category_id, destination_account_id, transaction_datetime, description, details, created_by, updated_by, created_at, updated_at, deleted_at, is_external, provider_transaction_id
`

type UpdateTransactionParams struct {
	Amount              pgtype.Numeric     `json:"amount"`
	Type                *string            `json:"type"`
	AccountID           *uuid.UUID         `json:"account_id"`
	CategoryID          *uuid.UUID         `json:"category_id"`
	Description         *string            `json:"description"`
	TransactionDatetime pgtype.Timestamptz `json:"transaction_datetime"`
	Details             dto.Details        `json:"details"`
	UpdatedBy           *uuid.UUID         `json:"updated_by"`
	ID                  uuid.UUID          `json:"id"`
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, updateTransaction,
		arg.Amount,
		arg.Type,
		arg.AccountID,
		arg.CategoryID,
		arg.Description,
		arg.TransactionDatetime,
		arg.Details,
		arg.UpdatedBy,
		arg.ID,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Type,
		&i.AccountID,
		&i.CategoryID,
		&i.DestinationAccountID,
		&i.TransactionDatetime,
		&i.Description,
		&i.Details,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsExternal,
		&i.ProviderTransactionID,
	)
	return i, err
}
