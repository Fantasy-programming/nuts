// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transactions.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
    amount,
    type,
    account_id,
    category_id,
    description,
    transaction_datetime,
    medium,
    location,
    details,
    created_by
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
) RETURNING id, amount, type, account_id, category_id, description, transaction_datetime, medium, location, details, created_by, updated_by, created_at, updated_at, deleted_at
`

type CreateTransactionParams struct {
	Amount              pgtype.Numeric `json:"amount"`
	Type                string         `json:"type"`
	AccountID           uuid.UUID      `json:"account_id"`
	CategoryID          uuid.UUID      `json:"category_id"`
	Description         *string        `json:"description"`
	TransactionDatetime time.Time      `json:"transaction_datetime"`
	Medium              string         `json:"medium"`
	Location            *string        `json:"location"`
	Details             []byte         `json:"details"`
	CreatedBy           *uuid.UUID     `json:"created_by"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, createTransaction,
		arg.Amount,
		arg.Type,
		arg.AccountID,
		arg.CategoryID,
		arg.Description,
		arg.TransactionDatetime,
		arg.Medium,
		arg.Location,
		arg.Details,
		arg.CreatedBy,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Type,
		&i.AccountID,
		&i.CategoryID,
		&i.Description,
		&i.TransactionDatetime,
		&i.Medium,
		&i.Location,
		&i.Details,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
UPDATE transactions
SET deleted_at = current_timestamp
WHERE id = $1
RETURNING id, amount, type, account_id, category_id, description, transaction_datetime, medium, location, details, created_by, updated_by, created_at, updated_at, deleted_at
`

func (q *Queries) DeleteTransaction(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteTransaction, id)
	return err
}

const getCategorySpending = `-- name: GetCategorySpending :many
SELECT
    c.name as category_name,
    SUM(t.amount) as total_amount,
    COUNT(*) as transaction_count
FROM transactions t
JOIN categories c ON t.category_id = c.id
WHERE
    t.created_by = $1
    AND t.type = 'expense'
    AND t.transaction_datetime BETWEEN $2 AND $3
    AND t.deleted_at IS NULL
    AND c.deleted_at IS NULL
GROUP BY c.id, c.name
ORDER BY total_amount DESC
`

type GetCategorySpendingParams struct {
	UserID    *uuid.UUID `json:"user_id"`
	StartDate time.Time  `json:"start_date"`
	EndDate   time.Time  `json:"end_date"`
}

type GetCategorySpendingRow struct {
	CategoryName     string `json:"category_name"`
	TotalAmount      int64  `json:"total_amount"`
	TransactionCount int64  `json:"transaction_count"`
}

func (q *Queries) GetCategorySpending(ctx context.Context, arg GetCategorySpendingParams) ([]GetCategorySpendingRow, error) {
	rows, err := q.db.Query(ctx, getCategorySpending, arg.UserID, arg.StartDate, arg.EndDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCategorySpendingRow{}
	for rows.Next() {
		var i GetCategorySpendingRow
		if err := rows.Scan(&i.CategoryName, &i.TotalAmount, &i.TransactionCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionById = `-- name: GetTransactionById :one
SELECT id, amount, type, account_id, category_id, description, transaction_datetime, medium, location, details, created_by, updated_by, created_at, updated_at, deleted_at
FROM transactions
WHERE
    id = $1
    AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetTransactionById(ctx context.Context, id uuid.UUID) (Transaction, error) {
	row := q.db.QueryRow(ctx, getTransactionById, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Type,
		&i.AccountID,
		&i.CategoryID,
		&i.Description,
		&i.TransactionDatetime,
		&i.Medium,
		&i.Location,
		&i.Details,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getTransactionStats = `-- name: GetTransactionStats :one
SELECT
    COUNT(*) as total_count,
    SUM(CASE WHEN type = 'income' THEN amount ELSE 0 END) as total_income,
    SUM(CASE WHEN type = 'expense' THEN amount ELSE 0 END) as total_expenses,
    SUM(CASE WHEN type = 'transfer' THEN amount ELSE 0 END) as total_transfers
FROM transactions
WHERE created_by = $1
AND transaction_datetime BETWEEN $2 AND $3
AND deleted_at IS NULL
`

type GetTransactionStatsParams struct {
	UserID    *uuid.UUID `json:"user_id"`
	StartDate time.Time  `json:"start_date"`
	EndDate   time.Time  `json:"end_date"`
}

type GetTransactionStatsRow struct {
	TotalCount     int64 `json:"total_count"`
	TotalIncome    int64 `json:"total_income"`
	TotalExpenses  int64 `json:"total_expenses"`
	TotalTransfers int64 `json:"total_transfers"`
}

func (q *Queries) GetTransactionStats(ctx context.Context, arg GetTransactionStatsParams) (GetTransactionStatsRow, error) {
	row := q.db.QueryRow(ctx, getTransactionStats, arg.UserID, arg.StartDate, arg.EndDate)
	var i GetTransactionStatsRow
	err := row.Scan(
		&i.TotalCount,
		&i.TotalIncome,
		&i.TotalExpenses,
		&i.TotalTransfers,
	)
	return i, err
}

const listTransactions = `-- name: ListTransactions :many
SELECT id, amount, type, account_id, category_id, description, transaction_datetime, medium, location, details, created_by, updated_by, created_at, updated_at, deleted_at
FROM transactions
WHERE
    created_by = $1
    AND deleted_at IS NULL
ORDER BY transaction_datetime DESC
`

func (q *Queries) ListTransactions(ctx context.Context, userID *uuid.UUID) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, listTransactions, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.Type,
			&i.AccountID,
			&i.CategoryID,
			&i.Description,
			&i.TransactionDatetime,
			&i.Medium,
			&i.Location,
			&i.Details,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransactionsByAccount = `-- name: ListTransactionsByAccount :many
SELECT id, amount, type, account_id, category_id, description, transaction_datetime, medium, location, details, created_by, updated_by, created_at, updated_at, deleted_at
FROM transactions
WHERE
    account_id = $1
    AND deleted_at IS NULL
ORDER BY transaction_datetime DESC
`

func (q *Queries) ListTransactionsByAccount(ctx context.Context, accountID uuid.UUID) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, listTransactionsByAccount, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.Type,
			&i.AccountID,
			&i.CategoryID,
			&i.Description,
			&i.TransactionDatetime,
			&i.Medium,
			&i.Location,
			&i.Details,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransactionsByCategory = `-- name: ListTransactionsByCategory :many
SELECT id, amount, type, account_id, category_id, description, transaction_datetime, medium, location, details, created_by, updated_by, created_at, updated_at, deleted_at
FROM transactions
WHERE
    category_id = $1
    AND deleted_at IS NULL
ORDER BY transaction_datetime DESC
`

func (q *Queries) ListTransactionsByCategory(ctx context.Context, categoryID uuid.UUID) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, listTransactionsByCategory, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.Type,
			&i.AccountID,
			&i.CategoryID,
			&i.Description,
			&i.TransactionDatetime,
			&i.Medium,
			&i.Location,
			&i.Details,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransactionsByDateRange = `-- name: ListTransactionsByDateRange :many
SELECT id, amount, type, account_id, category_id, description, transaction_datetime, medium, location, details, created_by, updated_by, created_at, updated_at, deleted_at
FROM transactions
WHERE
    created_by = $1
    AND transaction_datetime BETWEEN $2 AND $3
    AND deleted_at IS NULL
ORDER BY transaction_datetime DESC
`

type ListTransactionsByDateRangeParams struct {
	UserID    *uuid.UUID `json:"user_id"`
	StartDate time.Time  `json:"start_date"`
	EndDate   time.Time  `json:"end_date"`
}

func (q *Queries) ListTransactionsByDateRange(ctx context.Context, arg ListTransactionsByDateRangeParams) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, listTransactionsByDateRange, arg.UserID, arg.StartDate, arg.EndDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.Type,
			&i.AccountID,
			&i.CategoryID,
			&i.Description,
			&i.TransactionDatetime,
			&i.Medium,
			&i.Location,
			&i.Details,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransaction = `-- name: UpdateTransaction :one
UPDATE transactions
SET
    amount = coalesce($1, amount),
    type = coalesce($2, type),
    account_id = coalesce($3, account_id),
    category_id = coalesce($4, category_id),
    description = coalesce($5, description),
    transaction_datetime = coalesce($6, transaction_datetime),
    medium = coalesce($7, medium),
    location = coalesce($8, location),
    details = coalesce($9, details),
    updated_by = $10
WHERE 
    id = $11
    AND deleted_at IS NULL
RETURNING id, amount, type, account_id, category_id, description, transaction_datetime, medium, location, details, created_by, updated_by, created_at, updated_at, deleted_at
`

type UpdateTransactionParams struct {
	Amount              pgtype.Numeric     `json:"amount"`
	Type                *string            `json:"type"`
	AccountID           *uuid.UUID         `json:"account_id"`
	CategoryID          *uuid.UUID         `json:"category_id"`
	Description         *string            `json:"description"`
	TransactionDatetime pgtype.Timestamptz `json:"transaction_datetime"`
	Medium              *string            `json:"medium"`
	Location            *string            `json:"location"`
	Details             []byte             `json:"details"`
	UpdatedBy           *uuid.UUID         `json:"updated_by"`
	ID                  uuid.UUID          `json:"id"`
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, updateTransaction,
		arg.Amount,
		arg.Type,
		arg.AccountID,
		arg.CategoryID,
		arg.Description,
		arg.TransactionDatetime,
		arg.Medium,
		arg.Location,
		arg.Details,
		arg.UpdatedBy,
		arg.ID,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Type,
		&i.AccountID,
		&i.CategoryID,
		&i.Description,
		&i.TransactionDatetime,
		&i.Medium,
		&i.Location,
		&i.Details,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
