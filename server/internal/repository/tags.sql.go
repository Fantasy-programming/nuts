// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tags.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createTag = `-- name: CreateTag :one
INSERT INTO tags (
    user_id,
    name,
    color
) VALUES (
    $1, $2, $3
) RETURNING id, user_id, name, color, created_at
`

type CreateTagParams struct {
	UserID uuid.UUID   `json:"user_id"`
	Name   string      `json:"name"`
	Color  interface{} `json:"color"`
}

func (q *Queries) CreateTag(ctx context.Context, arg CreateTagParams) (Tag, error) {
	row := q.db.QueryRow(ctx, createTag, arg.UserID, arg.Name, arg.Color)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Color,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTag = `-- name: DeleteTag :exec
DELETE FROM tags
WHERE
    id = $1
    AND user_id = $2
`

type DeleteTagParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) DeleteTag(ctx context.Context, arg DeleteTagParams) error {
	_, err := q.db.Exec(ctx, deleteTag, arg.ID, arg.UserID)
	return err
}

const getTagById = `-- name: GetTagById :one
SELECT
    id,
    user_id,
    name,
    color
FROM tags
WHERE id = $1 LIMIT 1
`

type GetTagByIdRow struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
	Name   string    `json:"name"`
	Color  COLORENUM `json:"color"`
}

func (q *Queries) GetTagById(ctx context.Context, id uuid.UUID) (GetTagByIdRow, error) {
	row := q.db.QueryRow(ctx, getTagById, id)
	var i GetTagByIdRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Color,
	)
	return i, err
}

const getTagsByUserId = `-- name: GetTagsByUserId :many
SELECT
    id,
    name,
    color
FROM tags
WHERE user_id = $1
ORDER BY name
`

type GetTagsByUserIdRow struct {
	ID    uuid.UUID `json:"id"`
	Name  string    `json:"name"`
	Color COLORENUM `json:"color"`
}

func (q *Queries) GetTagsByUserId(ctx context.Context, userID uuid.UUID) ([]GetTagsByUserIdRow, error) {
	rows, err := q.db.Query(ctx, getTagsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTagsByUserIdRow{}
	for rows.Next() {
		var i GetTagsByUserIdRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Color); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTags = `-- name: ListTags :many
SELECT
    id,
    user_id,
    name,
    color
FROM tags
ORDER BY name
LIMIT
    $1
    OFFSET $2
`

type ListTagsParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

type ListTagsRow struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
	Name   string    `json:"name"`
	Color  COLORENUM `json:"color"`
}

func (q *Queries) ListTags(ctx context.Context, arg ListTagsParams) ([]ListTagsRow, error) {
	rows, err := q.db.Query(ctx, listTags, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListTagsRow{}
	for rows.Next() {
		var i ListTagsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Color,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTag = `-- name: UpdateTag :one
UPDATE tags
SET
    name = coalesce($1, name),
    color = coalesce($2, color)
WHERE
    id = $3
    AND user_id = $4
RETURNING id, user_id, name, color, created_at
`

type UpdateTagParams struct {
	Name   *string     `json:"name"`
	Color  interface{} `json:"color"`
	ID     uuid.UUID   `json:"id"`
	UserID uuid.UUID   `json:"user_id"`
}

func (q *Queries) UpdateTag(ctx context.Context, arg UpdateTagParams) (Tag, error) {
	row := q.db.QueryRow(ctx, updateTag,
		arg.Name,
		arg.Color,
		arg.ID,
		arg.UserID,
	)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Color,
		&i.CreatedAt,
	)
	return i, err
}
