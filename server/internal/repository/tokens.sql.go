// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tokens.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const deleteExpiredTokens = `-- name: DeleteExpiredTokens :exec
DELETE FROM user_tokens
WHERE user_id = $1 AND expires_at < NOW()
`

func (q *Queries) DeleteExpiredTokens(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteExpiredTokens, userID)
	return err
}

const deleteUserToken = `-- name: DeleteUserToken :exec
DELETE FROM user_tokens
WHERE user_id = $1
`

func (q *Queries) DeleteUserToken(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserToken, userID)
	return err
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT
    id,
    user_id,
    refresh_token,
    expires_at,
    last_used_at
FROM user_tokens
WHERE user_id = $1 AND refresh_token = $2 AND expires_at > NOW()
`

type GetRefreshTokenParams struct {
	UserID       uuid.UUID `json:"user_id"`
	RefreshToken string    `json:"refresh_token"`
}

func (q *Queries) GetRefreshToken(ctx context.Context, arg GetRefreshTokenParams) (UserToken, error) {
	row := q.db.QueryRow(ctx, getRefreshToken, arg.UserID, arg.RefreshToken)
	var i UserToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.ExpiresAt,
		&i.LastUsedAt,
	)
	return i, err
}

const saveUserToken = `-- name: SaveUserToken :exec
INSERT INTO user_tokens (user_id, refresh_token, expires_at)
VALUES ($1, $2, $3)
`

type SaveUserTokenParams struct {
	UserID       uuid.UUID `json:"user_id"`
	RefreshToken string    `json:"refresh_token"`
	ExpiresAt    time.Time `json:"expires_at"`
}

func (q *Queries) SaveUserToken(ctx context.Context, arg SaveUserTokenParams) error {
	_, err := q.db.Exec(ctx, saveUserToken, arg.UserID, arg.RefreshToken, arg.ExpiresAt)
	return err
}

const updateTokenTimeSTamp = `-- name: UpdateTokenTimeSTamp :exec
UPDATE user_tokens
SET last_used_at = NOW()
WHERE id = $1
`

func (q *Queries) UpdateTokenTimeSTamp(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, updateTokenTimeSTamp, id)
	return err
}
